2024-07-04 03:44:46,015 - INFO - Received scrape request with...
prompt: List me the mobile names and prices
source: https://www.amazon.in/s?bbn=1389401031&rh=n%3A976419031%2Cn%3A1389401031%2Cn%3A1389432031&dc&qid=1720042106&rnid=1389401031&ref=lp_1389401031_nr_n_3
2024-07-04 03:46:01,784 - INFO - Received scrape request with...
prompt: List me the mobile names and prices
source: https://bikroy.com/bn/ads/dhaka/mobile-phones
2024-07-04 04:02:35,549 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me the mobile names and prices', '--source', 'https://www.amazon.in/s?bbn=1389401031&rh=n%3A976419031%2Cn%3A1389401031%2Cn%3A1389432031&dc&qid=1720042106&rnid=1389401031&ref=lp_1389401031_nr_n_3'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_the_mobile_names_and_prices_20240704_040234.json\n', stderr='2024-07-04 03:44:49,510 - INFO - Starting scrape with...\nprompt: List me the mobile names and prices\nsource: https://www.amazon.in/s?bbn=1389401031&rh=n%3A976419031%2Cn%3A1389401031%2Cn%3A1389432031&dc&qid=1720042106&rnid=1389401031&ref=lp_1389401031_nr_n_3\n2024-07-04 03:44:49,552 - INFO - Starting scraping...\n2024-07-04 03:44:52,926 - INFO - Content scraped\n2024-07-04 03:45:11,271 - INFO - Loading faiss with AVX512 support.\n2024-07-04 03:45:11,310 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-04 04:02:34,769 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_the_mobile_names_and_prices_20240704_040234.json\n')
2024-07-04 04:02:35,551 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_the_mobile_names_and_prices_20240704_040234.json']
2024-07-04 04:02:35,551 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_the_mobile_names_and_prices_20240704_040234.json
2024-07-04 04:02:35,551 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_the_mobile_names_and_prices_20240704_040234.json found after 1 retries.
2024-07-04 04:02:35,553 - INFO - Output: {'title': 'Top Phone Deals of the Day (5 July)', 'description': "Check out these great deals on phones available for tomorrow's delivery!", 'image_url': '', 'products': [{'name': 'realme NARZO N65 5G (Moonlight Silver 8GB RAM, 128GB Storage)', 'rating': 'Not Yet Rated', 'price': 14998, 'mrp': 16999, 'discount': 12.5, 'coupon_applied_at_checkout': False, 'delivery_date': 'Tomorrow, 5 July', 'shipping': 'FREE Delivery by Amazon'}, {'name': 'iQOO Z9x 5G (Storm Grey, 6GB RAM, 128GB Storage)', 'rating': '4.1 out of 5 stars', 'price_range': [{'minimum_price': 14499, 'maximum_price': 14499}, {'minimum_price': 18999, 'maximum_price': None}], 'features': ['Snapdragon 6 Gen 1 with 560K+ AnTuTu Score', '6000 mAh Battery with 7.99mm Slim design', '44W FlashCharge'], 'coupon_applied_at_checkout': False, 'delivery_date': 'Tomorrow, 5 July', 'shipping': 'FREE Delivery by Amazon'}, {'name': 'realme NARZO 70x 5G (Ice Blue, 8GB RAM,128GB Storage)', 'rating': '4.0 out of 5 stars', 'price_range': [{'minimum_price': 12999, 'maximum_price': 12999}, {'minimum_price': 17999, 'maximum_price': None}], 'features': ['120Hz Ultra Smooth Display', 'Dimensity 6100+ 6nm 5G', '50MP AI Camera', '45W Charger in The Box'], 'coupon_applied_at_checkout': False, 'delivery_date': 'Tomorrow, 5 July', 'shipping': 'FREE Delivery by Amazon'}, {'name': 'Nokia G42 5G Powered by Snapdragon® 480 Plus 5G', 'rating': '3.9 out of 5 stars', 'price_range': [{'minimum_price': 1, 'maximum_price': None}, {'minimum_price': 1199, 'maximum_price': 1549}], 'features': ['Powered by Snapdragon® 480 Plus 5G', '50MP Triple Rear AI Camera', '6GB RAM (4GB RAM + 2GB Virtual RAM)', '128GB Storage', '3-day Battery Life', '2 Years of Android Upgrades'], 'coupon_applied_at_checkout': False, 'delivery_date': 'Tomorrow, 5 July', 'shipping': 'FREE Delivery by Amazon'}, {'name': 'Motorola G64 5G (Ice Lilac, 8GB RAM, 128GB Storage)', 'rating': '3.4 out of 5 stars', 'price_range': [{'minimum_price': 999, 'maximum_price': None}, {'minimum_price': 999, 'maximum_price': None}], 'features': ['Snapdragon 6 Gen 1 with 560K+ AnTuTu Score', '6000 mAh Battery with 7.99mm Slim design', '44W FlashCharge'], 'coupon_applied_at_checkout': False, 'delivery_date': 'Tomorrow, 5 July', 'shipping': 'FREE Delivery by Amazon'}], 'affiliate_disclaimer': "Prices are subject to change at any time and may vary by location or device. Products sold by Marketplace sellers are governed by the seller's particular policies."}
2024-07-04 04:17:23,590 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me the mobile names and prices', '--source', 'https://bikroy.com/bn/ads/dhaka/mobile-phones'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bikroycom_List_me_the_mobile_names_and_prices_20240704_041722.json\n', stderr='2024-07-04 03:46:07,134 - INFO - Starting scrape with...\nprompt: List me the mobile names and prices\nsource: https://bikroy.com/bn/ads/dhaka/mobile-phones\n2024-07-04 03:46:07,192 - INFO - Starting scraping...\n2024-07-04 03:46:29,792 - INFO - Content scraped\n2024-07-04 04:03:18,655 - INFO - Loading faiss with AVX512 support.\n2024-07-04 04:03:18,711 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-04 04:17:22,861 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bikroycom_List_me_the_mobile_names_and_prices_20240704_041722.json\n')
2024-07-04 04:17:23,591 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bikroycom_List_me_the_mobile_names_and_prices_20240704_041722.json']
2024-07-04 04:17:23,591 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bikroycom_List_me_the_mobile_names_and_prices_20240704_041722.json
2024-07-04 04:17:23,591 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bikroycom_List_me_the_mobile_names_and_prices_20240704_041722.json found after 1 retries.
2024-07-04 04:17:23,592 - INFO - Output: {'Product': {'Name': 'OPPO 6/128 GB', 'Price': '৳ 8,800', 'Minutes': '26', 'Product_ID': '21'}, 'Previous': '...', 'Next': 'জনপ্রিয় মোবাইল ফোন.', 'Image URL': 'https://i.bikroy-st.com/oppo-6-128-jibi-ntun-new-for-sale-dhaka-3/d6d8f33a-131d-4bf5-9835-06d68e0f4f5e/160/120/cropped.webp', 'Locations': ['বসুন্ধরা সিটি শপিং মল', 'ইসিবি চত্বর', 'ধামরাই', 'কোতোয়ালি', 'যমুনা ফিউচার পার্ক', 'কাফরুল', 'মাওয়া হাইওয়ে', 'নবাবগঞ্জ', 'মোতালেব প্লাজা', '৬০ ফিট রোড', 'বছিলা', 'শান্তিনগর (15)', 'শান্তিনগর (7)', 'শেওড়াপাড়া', 'দোহার', 'লালমাটিয়া', 'মাওয়া হাইওয়ে', 'নবাবগঞ্জ (19)', 'সুযোকারা', 'কাফরুলি এলাকা'], 'Types of Ads': ['বিক্রির জন্য (21, 164)'], 'Requirements': ['আবশ্যক (207)'], 'Condition': ['ব্যবহৃত (18719)', 'নতুন (2445)'], 'Brand': [{'Name': 'হোমপেজ', 'Selection': None}, {'Name': 'Mim Telecom', 'Selection': None}, {'Name': 'Mobile Plaza - মোবাইল প্লাজা (শ্যামলী)', 'Selection': None}], 'Products': [{'Name': 'Vivo 6/128 GB', 'Price': '৳ ৬,৮৯০', 'New/Used': '(New)', 'Location': 'ঢাকা', 'Selection': None}, {'Name': 'Vivo Y21 mode:', 'Price': '৳ ৮,০০০', 'New/Used': 'Used', 'Location': 'ঢাকা', 'Selection': None}, {'Name': 'Realme 5i realmi', 'Price': '৳ ৩,২০০', 'New/Used': 'Used', 'Location': 'ঢাকা', 'Selection': None}, {'Name': 'Tecno Spark 5 Pro 4 gb64 gb', 'Price': '৳ ৭,৫০০', 'New/Used': 'Used', 'Location': 'ঢাকা', 'Selection': None}, {'Name': 'OPPO F19s', 'Price': '৳ 23,000', 'New/Used': '(New)', 'Location': 'ঢাকা', 'Selection': None}, {'Name': 'OPPO A54 (4GB+128GB)', 'Price': '৳ 17,000', 'New/Used': '(New)', 'Location': 'ঢাকা', 'Selection': None}, {'Name': 'OPPO A54s (3GB+64GB)', 'Price': '৳ 13,000', 'New/Used': '(New)', 'Location': 'ঢাকা', 'Selection': None}, {'Name': 'OPPO A95 (8GB+128GB)', 'Price': '৳ 30,000', 'New/Used': '(New)', 'Location': 'ঢাকা', 'Selection': None}], 'url': 'https://bikroy.com/', 'name': 'Bikroy Homepage'}
2024-07-07 23:07:20,942 - INFO - Received scrape request with...
prompt: List me the product name and price
source: https://www.daraz.com.bd/mens-wallets/
2024-07-07 23:13:20,236 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me the product name and price', '--source', 'https://www.daraz.com.bd/mens-wallets/'], returncode=0, stdout='/home/noman/Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_the_product_name_and_price_20240707_231319.json\n', stderr='2024-07-07 23:07:24,224 - INFO - Starting scrape with...\nprompt: List me the product name and price\nsource: https://www.daraz.com.bd/mens-wallets/\n2024-07-07 23:07:24,347 - INFO - Starting scraping...\n2024-07-07 23:07:50,445 - INFO - Content scraped\n2024-07-07 23:08:08,429 - INFO - Loading faiss with AVX512 support.\n2024-07-07 23:08:08,476 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-07 23:13:19,544 - INFO - Result successfully saved to /home/noman/Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_the_product_name_and_price_20240707_231319.json\n')
2024-07-07 23:13:20,238 - INFO - Output lines: ['/home/noman/Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_the_product_name_and_price_20240707_231319.json']
2024-07-07 23:13:20,238 - INFO - File path: /home/noman/Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_the_product_name_and_price_20240707_231319.json
2024-07-07 23:13:20,238 - INFO - File /home/noman/Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_the_product_name_and_price_20240707_231319.json found after 1 retries.
2024-07-07 23:13:20,239 - INFO - Output: {'Product List': [{'Name': 'Item 1', 'Price': 'Price for Item 1'}, {'Name': 'Item 2', 'Price': 'Price for Item 2'}, {'Name': 'Item 3', 'Price': 'Price for Item 3'}]}
2024-07-09 12:39:31,983 - INFO - Received scrape request with...
prompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product
source: https://www.daraz.com.bd/smartphones/
2024-07-09 12:55:18,390 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product', '--source', 'https://www.daraz.com.bd/smartphones/'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_url_brand_retail_price_p_20240709_125515.json\n', stderr='2024-07-09 12:39:38,064 - INFO - Starting scrape with...\nprompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product\nsource: https://www.daraz.com.bd/smartphones/\n2024-07-09 12:39:38,187 - INFO - Starting scraping...\n2024-07-09 12:40:04,036 - INFO - Content scraped\n2024-07-09 12:41:04,553 - INFO - Loading faiss with AVX512 support.\n2024-07-09 12:41:04,599 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 12:55:15,193 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_url_brand_retail_price_p_20240709_125515.json\n')
2024-07-09 12:55:18,428 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_url_brand_retail_price_p_20240709_125515.json']
2024-07-09 12:55:18,429 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_url_brand_retail_price_p_20240709_125515.json
2024-07-09 12:55:18,431 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_url_brand_retail_price_p_20240709_125515.json found after 1 retries.
2024-07-09 12:55:18,454 - INFO - Output: {'website': 'Daraz', 'homepage_url': 'https://www.daraz.com.bd', 'categories': {'Smart Phones': {'title': 'Shop Smart Phones Online in Bangladesh', 'description': 'Find a wide variety of smartphones from popular brands like OnePlus, Realme, Symphony, Tecno and more. Enjoy fast delivery, vouchers, and everyday low prices!', 'items': [{'productName': 'OnePlus Nord N30 SE 5G (4+128) Smartphone', 'rating': '4.5/5', 'soldCount': 890, 'voucherCount': 4, 'price': '৳15,750', 'wasPrice': '৳ 15,999'}, {'productName': 'Symphony Z60 Plus ( 6 GB/ 128 GB)', 'rating': '4.6/5', 'soldCount': 897, 'voucherCount': 4, 'price': '৳11,099', 'wasPrice': '৳ 11,999'}, {'productName': 'Realme C55 - (6GB/128GB)', 'rating': '4.7/5', 'soldCount': 1000, 'voucherCount': 4, 'price': '', 'wasPrice': ''}, {'productName': 'Samsung Galaxy M12 (128GB + 64GB)', 'rating': '4.7/5', 'soldCount': '', 'voucherCount': '', 'price': '৳16,999', 'wasPrice': '৳17,999'}, {'productName': 'Apple iPhone 12 mini', 'rating': '', 'soldCount': '', 'voucherCount': '', 'price': '', 'wasPrice': ''}]}}, 'social_media': {'Facebook': 'https://www.facebook.com/DarazBangladesh/', 'Twitter': 'https://twitter.com/DarazBangladesh/', 'YouTube': 'https://www.youtube.com/c/DarazBangladeshOfficial/'}, 'blogs': ['daily-deals/', 'daraz-cares/', 'pages.daraz.com.bd/wow/gcp/daraz/channel/bd/dmart/index.html'], 'images': ['https://img.alicdn.com/imgextra/i1/O1CN01Ie2YnK1JmZ1mL3fY5_!!6000000001071-2-tps-60-60.png', 'https://icms-image.slatic.net/images/ims-web/d19edbfe-4ab9-486f-ba66-b29d80483a50.png', 'https://icms-image.slatic.net/images/ims-web/8f2bd105-9cf3-45ba-af3d-ba979a63cc3c.png', 'https://img.alicdn.com/tfs/TB1g_wNhXpYBeJjSZFkXXauypXa-1024-1024.jpg', 'https://www.darazlogisticsbd.com/_nuxt/img/logo-new-white.f7968c7.png']}
2024-07-09 13:00:02,435 - INFO - Received scrape request with...
prompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product
source: https://www.amazon.in/s?i=electronics&bbn=1389401031&rh=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&dc&qid=1720508386&rnid=3837712031&ref=sr_nr_p_89_7&ds=v1%3AHbh8alqcfueZWn9Vx7I8P9O3fzbqR2aWeMx6qN73zpg
2024-07-09 13:25:20,224 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product', '--source', 'https://www.amazon.in/s?i=electronics&bbn=1389401031&rh=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&dc&qid=1720508386&rnid=3837712031&ref=sr_nr_p_89_7&ds=v1%3AHbh8alqcfueZWn9Vx7I8P9O3fzbqR2aWeMx6qN73zpg'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_132519.json\n', stderr='2024-07-09 13:00:08,894 - INFO - Starting scrape with...\nprompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product\nsource: https://www.amazon.in/s?i=electronics&bbn=1389401031&rh=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&dc&qid=1720508386&rnid=3837712031&ref=sr_nr_p_89_7&ds=v1%3AHbh8alqcfueZWn9Vx7I8P9O3fzbqR2aWeMx6qN73zpg\n2024-07-09 13:00:09,007 - INFO - Starting scraping...\n2024-07-09 13:00:13,680 - INFO - Content scraped\n2024-07-09 13:00:40,812 - INFO - Loading faiss with AVX512 support.\n2024-07-09 13:00:40,862 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 13:25:19,342 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_132519.json\n')
2024-07-09 13:25:20,225 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_132519.json']
2024-07-09 13:25:20,225 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_132519.json
2024-07-09 13:25:20,225 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_132519.json found after 1 retries.
2024-07-09 13:25:20,227 - INFO - Output: {'title': 'Electronics on Amazon', 'links': [{'text': 'Used and New Electronics', 'url': 'https://www.amazon.in/s?i=electronics&bbn;=1389401031&rh;=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme%2Cp_n_condition-type%3A13736826031&dc;&qid;=1720508411&rnid;=8609959031&ref;=sr_nr_p_n_condition-type_2&ds;=v1%3AlqFQxCp0LkVTLz33KCyMpmYuVbju7uyxkaDnQXKtz%2BI'}, {'text': 'Deals on Electronics', 'url': 'https://www.amazon.in/s?i=electronics&bbn;=1389401031&rh;=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme%2Cp_n_deal_type-1&dc;&qid;=1720508411&rnid;=26921223031&ref;=sr_nr_p_n_deal_type_2&ds;=v1%3Ai2MtuK3YkUv%2BgGxA3U9iu8A11puQjMUdzAZAYQikMs0'}, {'text': 'Refurbished Electronics', 'url': 'https://www.amazon.in/s?i=electronics&bbn;=1389401031&rh;=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme%2Cp_n_deal_type-1&dc;&qid;=1720508411&rnid;=26921223031&ref;=sr_nr_p_n_deal_type_3&ds;=v1%3Ai2MtuK3YkUv%2BgGxA3U9iu8A11puQjMUdzAZAYQikMs0'}, {'text': 'New Electronics - Good Condition', 'url': 'https://www.amazon.in/s?i=electronics&bbn;=1389401031&rh;=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme%2Cp_n_condition-type%3A13736826031&dc;&qid;=1720508411&rnid;=8609959031&ref=sr_nr_p_n_condition_type_2&ds=%2Bv1%3AlqFQxCp0LkVTLz33KCyMpmYuVbju7uyxkaDnQXKtzBI'}, {'text': 'New Electronics - Very Good Condition', 'url': 'https://www.amazon.in/s?i=electronics&bbn;=1389401031&rh;=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme%2Cp_n_condition-type%3A13736826031&dc;&qid;=1720508411&rnid;=8609959031&ref=sr_nr_p_n_condition_type_1&ds=%2Bv1%3AlqFQxCp0LkVTLz33KCyMpmYuVbju7uyxkaDnQXKtzBI'}, {'text': 'New Electronics - Like New', 'url': 'https://www.amazon.in/s?i=electronics&bbn;=1389401031&rh;=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme%2Cp_n_condition-type%3A13736826031&dc;&qid;=1720508411&rnid;=8609959031&ref=sr_nr_p_n_condition_type_3&ds=%2Bv1%3AlqFQxCp0LkVTLz33KCyMpmYuVbju7uyxkaDnQXKtzBI'}, {'text': 'New Electronics - Refurbished', 'url': 'https://www.amazon.in/s?i=electronics&bbn;=1389401031&rh;=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme%2Cp_n_condition-type%3A13736826031&dc;&qid;=1720508411&rnid;=8609959031&ref=sr_nr_p_n_condition_type_4&ds=%2Bv1%3AlqFQxCp0LkVTLz33KCyMpmYuVbju7uyxkaDnQXKtzBI'}, {'text': 'New Electronics - Open-box', 'url': 'https://www.amazon.in/s?i=electronics&bbn;=1389401031&rh;=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme%2Cp_n_condition-type%3A13736826031&dc;&qid;=1720508411&rnid;=8609959031&ref=sr_nr_p_n_condition_type_5&ds=%2Bv1%3AlqFQxCp0LkVTLz33KCyMpmYuVbju7uyxkaDnQXKtzBI'}]}
2024-07-09 13:40:06,287 - INFO - Received scrape request with...
prompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product
source: https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX82VVQ/ref=sr_1_1?dib=eyJ2IjoiMSJ9.2vaHYCliE3wMVavwBcAKgDaKWZr4tQ3tUmLIN9mWfV-gOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifLujniSug6jLmgcXlXvu4s2KMZ389f25wMTdhE-8vHc8qlCXvoxivhFf73ydWMoTbtNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZGq1dmzd0MRk-Awr2wLK8lLbPUhV6qiSjCJu6FjFGaRiM.3W-CQUUAGKMT3YLZ7CjP5wp9gJTo__yr12teGDDFh6I&dib_tag=se&qid=1720508389&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1
2024-07-09 13:54:31,673 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product', '--source', 'https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX82VVQ/ref=sr_1_1?dib=eyJ2IjoiMSJ9.2vaHYCliE3wMVavwBcAKgDaKWZr4tQ3tUmLIN9mWfV-gOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifLujniSug6jLmgcXlXvu4s2KMZ389f25wMTdhE-8vHc8qlCXvoxivhFf73ydWMoTbtNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZGq1dmzd0MRk-Awr2wLK8lLbPUhV6qiSjCJu6FjFGaRiM.3W-CQUUAGKMT3YLZ7CjP5wp9gJTo__yr12teGDDFh6I&dib_tag=se&qid=1720508389&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_135430.json\n', stderr='2024-07-09 13:40:12,821 - INFO - Starting scrape with...\nprompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product\nsource: https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX82VVQ/ref=sr_1_1?dib=eyJ2IjoiMSJ9.2vaHYCliE3wMVavwBcAKgDaKWZr4tQ3tUmLIN9mWfV-gOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifLujniSug6jLmgcXlXvu4s2KMZ389f25wMTdhE-8vHc8qlCXvoxivhFf73ydWMoTbtNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZGq1dmzd0MRk-Awr2wLK8lLbPUhV6qiSjCJu6FjFGaRiM.3W-CQUUAGKMT3YLZ7CjP5wp9gJTo__yr12teGDDFh6I&dib_tag=se&qid=1720508389&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1\n2024-07-09 13:40:12,936 - INFO - Starting scraping...\n2024-07-09 13:40:20,615 - INFO - Content scraped\n2024-07-09 13:40:41,992 - INFO - Loading faiss with AVX512 support.\n2024-07-09 13:40:42,033 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 13:54:30,744 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_135430.json\n')
2024-07-09 13:54:31,675 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_135430.json']
2024-07-09 13:54:31,675 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_135430.json
2024-07-09 13:54:31,675 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_135430.json found after 1 retries.
2024-07-09 13:54:31,676 - INFO - Output: {'sports': 'https://www.amazon.in/Sports-Shopping/b/?ie=UTF8&node;=1350386031&ref;_=nav_cs_sports', 'toys': 'https://www.amazon.in/Toys-Games/b/?ie=UTF8&node;=1350380031&ref;_=nav_cs_toys', 'custom': 'https://www.amazon.in/Amazon-Custom/b/?ie=UTF8&node;=32615889031&ref;_=nav_cs_custom', 'gift_card_store': 'https://www.amazon.in/gift-card-store/b/?ie=UTF8&node;=3704982031&ref;_=nav_cs_gc', 'gourmet_specialty_foods': 'https://www.amazon.in/Gourmet-Specialty-Foods/b/?ie=UTF8&node;=2454178031&ref;_=nav_cs_grocery', 'health_and_personal_care': 'https://www.amazon.in/health-and-personal-care/b/?ie=UTF8&node;=1350384031&ref;_=nav_cs_hpc', 'baby': 'https://www.amazon.in/Baby/b/?ie=UTF8&node;=1571274031&ref;_=nav_cs_baby', 'electronics': 'https://www.amazon.in/electronics-shopping/b?ie=UTF8&node;=16245621011&ref=bl_til', 'redmi startrail': 'https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/product-reviews/B0CNX82VVQ/ref=cm_cr_dp_d_show_all_btm?ie=UTF8&reviewerType;=all_reviews', 'facebook': 'https://www.facebook.com/AmazonIN', 'twitter': 'https://twitter.com/AmazonIN', 'instagram': 'https://www.instagram.com/amazondotin'}
2024-07-09 13:58:11,589 - INFO - Received scrape request with...
prompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product
source: https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX82VVQ/ref=sr_1_1?dib=eyJ2IjoiMSJ9.2vaHYCliE3wMVavwBcAKgDaKWZr4tQ3tUmLIN9mWfV-gOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifLujniSug6jLmgcXlXvu4s2KMZ389f25wMTdhE-8vHc8qlCXvoxivhFf73ydWMoTbtNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZGq1dmzd0MRk-Awr2wLK8lLbPUhV6qiSjCJu6FjFGaRiM.3W-CQUUAGKMT3YLZ7CjP5wp9gJTo__yr12teGDDFh6I&dib_tag=se&qid=1720508389&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1
2024-07-09 14:13:40,574 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product', '--source', 'https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX82VVQ/ref=sr_1_1?dib=eyJ2IjoiMSJ9.2vaHYCliE3wMVavwBcAKgDaKWZr4tQ3tUmLIN9mWfV-gOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifLujniSug6jLmgcXlXvu4s2KMZ389f25wMTdhE-8vHc8qlCXvoxivhFf73ydWMoTbtNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZGq1dmzd0MRk-Awr2wLK8lLbPUhV6qiSjCJu6FjFGaRiM.3W-CQUUAGKMT3YLZ7CjP5wp9gJTo__yr12teGDDFh6I&dib_tag=se&qid=1720508389&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_141339.json\n', stderr='2024-07-09 13:58:21,636 - INFO - Starting scrape with...\nprompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product\nsource: https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX82VVQ/ref=sr_1_1?dib=eyJ2IjoiMSJ9.2vaHYCliE3wMVavwBcAKgDaKWZr4tQ3tUmLIN9mWfV-gOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifLujniSug6jLmgcXlXvu4s2KMZ389f25wMTdhE-8vHc8qlCXvoxivhFf73ydWMoTbtNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZGq1dmzd0MRk-Awr2wLK8lLbPUhV6qiSjCJu6FjFGaRiM.3W-CQUUAGKMT3YLZ7CjP5wp9gJTo__yr12teGDDFh6I&dib_tag=se&qid=1720508389&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1\n2024-07-09 13:58:21,748 - INFO - Starting scraping...\n2024-07-09 13:58:29,520 - INFO - Content scraped\n2024-07-09 13:59:03,790 - INFO - Loading faiss with AVX512 support.\n2024-07-09 13:59:03,842 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 14:13:39,631 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_141339.json\n')
2024-07-09 14:13:40,575 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_141339.json']
2024-07-09 14:13:40,575 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_141339.json
2024-07-09 14:13:40,575 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_url_brand_retail_price_p_20240709_141339.json found after 1 retries.
2024-07-09 14:13:40,576 - INFO - Output: {'assistant': {'language': 'en', 'memory': {'time_slots': [{'name': 'with setup', 'details': ['Free installation on Washing Machines and Refrigerator, Paid Installations for Air Conditioners and Chimneys. For Brand provided AC installations, service charges will have to be paid directly to the brand technician.', 'Free assembly services for Furniture items requiring professional assembly', 'Paid set-up service on Laptops and SSD', 'Installation/Assembly &/or Set-up services are also available on Dishwashers, Security cameras, Cycles, Inverters, Soundbars', 'Automotive support: Tyre installation, Engine oil change, Brake disk replacement etc. available in select pincodes']}]}, 'version': '1.0'}, 'products': [{'title': 'Redmi', 'ratings': '90% positive ratings from 100K+ customers', 'orders': '100K+ recent orders from this brand', 'years_on_amazon': '9+ years on Amazon', 'highly_rated_for': ['value for money', 'good performance', 'looks good'], 'time_slot_details': [{'name': 'with setup', 'details': ['Free installation on Washing Machines and Refrigerator', 'Paid Installations for Air Conditioners and Chimneys. For Brand provided AC installations, service charges will have to be paid directly to the brand technician.', 'Free assembly services for Furniture items requiring professional assembly', 'Paid set-up service on Laptops and SSD', 'Installation/Assembly &/or Set-up services are also available on Dishwashers, Security cameras, Cycles, Inverters, Soundbars', 'Automotive support: Tyre installation, Engine oil change, Brake disk replacement etc. available in select pincodes']}], 'phone_setup_service': {'description': 'Add Phone set up service', 'details': {'price': '₹349.00', 'ratings': '_4.0 stars_ (519)', 'other_info': 'Service performed by trained technician at your scheduled date & time\nPhone Setup: SIM & memory card setup\nThis service requires a stable internet connection (4-in-1 super pixel) with the following modes: Photo | Portrait | Night | Video | 50MP mode | Time-lapse | Classic film filters | Frame | HDR | Google lens | Voice Shutter |\n› See more product details'}}, 'amazon_delivered': 'Amazon directly manages delivery for this product. Order now to ensure quick and reliable delivery.', 'reviews': [{'link': 'https://www.amazon.in/product-reviews/B0D54GQVRN', 'title': 'Redmi Leather Storage 10000mAh Power Bank Review - Amazon.in'}, {'link': 'https://www.amazon.in/product-reviews/B0CVL3488L', 'title': 'Realme 6 Pro Review: A worthy flagship killer for the budget-conscious - Amazon.in'}]}], 'actions': [{'name': 'get_product_details', 'arguments': {'product_title': 'Redmi'}}, {'name': 'request_time_slot', 'arguments': {'service_type': 'Installation/Assembly &/or Set-up'}}, {'name': 'show_product_reviews', 'arguments': {'product_title': 'Redmi'}}]}
2024-07-09 14:22:51,412 - INFO - Received scrape request with...
prompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product. If any key not found, keep it as null, but you have keep all the keys listed here. No additional information needed.
source: https://www.daraz.com.bd/products/oneplus-nord-n30-se-5g-4128-smartphone-i367013885-s1830770243.html?spm=a2a0e.searchlistcategory.sku.1.2471310cxpJ5Qs&search=1
2024-07-09 15:50:59,479 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product. If any key not found, keep it as null, but you have keep all the keys listed here. No additional information needed.', '--source', 'https://www.daraz.com.bd/products/oneplus-nord-n30-se-5g-4128-smartphone-i367013885-s1830770243.html?spm=a2a0e.searchlistcategory.sku.1.2471310cxpJ5Qs&search=1'], returncode=0, stdout='', stderr='2024-07-09 14:23:00,181 - INFO - Starting scrape with...\nprompt: List me product_id, source_url, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, updated_at for each product. If any key not found, keep it as null, but you have keep all the keys listed here. No additional information needed.\nsource: https://www.daraz.com.bd/products/oneplus-nord-n30-se-5g-4128-smartphone-i367013885-s1830770243.html?spm=a2a0e.searchlistcategory.sku.1.2471310cxpJ5Qs&search=1\n2024-07-09 14:23:00,282 - INFO - Starting scraping...\n2024-07-09 14:23:24,846 - INFO - Content scraped\n2024-07-09 14:23:41,202 - INFO - Loading faiss with AVX512 support.\n2024-07-09 14:23:41,246 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 15:50:50,350 - INFO - Scraper returned an empty result.\n')
2024-07-09 15:51:07,268 - INFO - Output lines: []
2024-07-09 15:51:07,432 - ERROR - No output from scrap.py
2024-07-09 18:32:16,496 - INFO - Received scrape request with...
prompt: List me the product id, brand, price, category, condition, description, quantity, and unique identifier of each product found in the URL. Also, access all the URLs found in this URL.
source: https://bstock.com/supplystore/auction/auction/list/?seller=1551
2024-07-09 18:45:06,885 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me the product id, brand, price, category, condition, description, quantity, and unique identifier of each product found in the URL. Also, access all the URLs found in this URL.', '--source', 'https://bstock.com/supplystore/auction/auction/list/?seller=1551'], returncode=0, stdout='', stderr='2024-07-09 18:32:39,557 - INFO - Starting scrape with...\nprompt: List me the product id, brand, price, category, condition, description, quantity, and unique identifier of each product found in the URL. Also, access all the URLs found in this URL.\nsource: https://bstock.com/supplystore/auction/auction/list/?seller=1551\n2024-07-09 18:32:39,688 - INFO - Starting scraping...\n2024-07-09 18:33:37,079 - INFO - Content scraped\n2024-07-09 18:39:08,103 - INFO - Loading faiss with AVX512 support.\n2024-07-09 18:39:11,160 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 18:44:57,531 - ERROR - Error during SmartScraperGraph execution: Ollama call failed with status code 500. Details: {"error":"timed out waiting for llama runner to start - progress 0.00 - "}\n')
2024-07-09 18:45:06,886 - INFO - Output lines: []
2024-07-09 18:45:06,887 - ERROR - No output from scrap.py
2024-07-09 18:51:12,878 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://bstock.com/supplystore/auctions/cell-phones/apple-iphone-11-pro-max/id/624240/
2024-07-09 18:55:02,176 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://bstock.com/supplystore/auctions/cell-phones/apple-iphone-11-pro-max/id/624240/'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bstockcom_List_me_product_id_source_brand_retail_price_price_20240709_185501.json\n', stderr='2024-07-09 18:51:25,133 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://bstock.com/supplystore/auctions/cell-phones/apple-iphone-11-pro-max/id/624240/\n2024-07-09 18:51:25,289 - INFO - Starting scraping...\n2024-07-09 18:51:55,418 - INFO - Content scraped\n2024-07-09 18:52:22,414 - INFO - Loading faiss with AVX512 support.\n2024-07-09 18:52:22,472 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 18:55:01,383 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bstockcom_List_me_product_id_source_brand_retail_price_price_20240709_185501.json\n')
2024-07-09 18:55:02,178 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bstockcom_List_me_product_id_source_brand_retail_price_price_20240709_185501.json']
2024-07-09 18:55:02,178 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bstockcom_List_me_product_id_source_brand_retail_price_price_20240709_185501.json
2024-07-09 18:55:02,179 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/bstockcom_List_me_product_id_source_brand_retail_price_price_20240709_185501.json found after 1 retries.
2024-07-09 18:55:02,179 - INFO - Output: {'products': [{'product_id': 'NA', 'source': 'bstock.com', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'NA', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}]}
2024-07-09 18:56:41,837 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below for each mobile
source: https://bstock.com/supplystore/auctions/cell-phones/apple-iphone-11-pro-max/id/624240/
2024-07-09 18:57:19,585 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below for each mobile', '--source', 'https://bstock.com/supplystore/auctions/cell-phones/apple-iphone-11-pro-max/id/624240/'], returncode=-2, stdout='', stderr='2024-07-09 18:56:48,812 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below for each mobile\nsource: https://bstock.com/supplystore/auctions/cell-phones/apple-iphone-11-pro-max/id/624240/\n2024-07-09 18:56:48,934 - INFO - Starting scraping...\nTraceback (most recent call last):\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/runners.py", line 44, in run\n    return loop.run_until_complete(main)\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 634, in run_until_complete\n    self.run_forever()\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 601, in run_forever\n    self._run_once()\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 1869, in _run_once\n    event_list = self._selector.select(timeout)\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/selectors.py", line 469, in select\n    fd_event_list = self._selector.poll(timeout, max_ev)\nKeyboardInterrupt\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/scrap.py", line 105, in <module>\n    main()\n  File "/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/scrap.py", line 83, in main\n    result = smart_scraper_graph.run()\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/graphs/smart_scraper_graph.py", line 118, in run\n    self.final_state, self.execution_info = self.graph.execute(inputs)\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/graphs/base_graph.py", line 171, in execute\n    return self._execute_standard(initial_state)\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/graphs/base_graph.py", line 110, in _execute_standard\n    result = current_node.execute(state)\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/nodes/fetch_node.py", line 160, in execute\n    document = loader.load()\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/langchain_core/document_loaders/base.py", line 29, in load\n    return list(self.lazy_load())\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/docloaders/chromium.py", line 105, in lazy_load\n    html_content = asyncio.run(scraping_fn(url))\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/runners.py", line 47, in run\n    _cancel_all_tasks(loop)\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/runners.py", line 63, in _cancel_all_tasks\n    loop.run_until_complete(\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 634, in run_until_complete\n    self.run_forever()\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 601, in run_forever\n    self._run_once()\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 1869, in _run_once\n    event_list = self._selector.select(timeout)\n  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/selectors.py", line 469, in select\n    fd_event_list = self._selector.poll(timeout, max_ev)\nKeyboardInterrupt\n')
2024-07-09 18:57:19,586 - ERROR - Command failed with exit code -2: 2024-07-09 18:56:48,812 - INFO - Starting scrape with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below for each mobile
source: https://bstock.com/supplystore/auctions/cell-phones/apple-iphone-11-pro-max/id/624240/
2024-07-09 18:56:48,934 - INFO - Starting scraping...
Traceback (most recent call last):
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/runners.py", line 44, in run
    return loop.run_until_complete(main)
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 634, in run_until_complete
    self.run_forever()
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 601, in run_forever
    self._run_once()
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 1869, in _run_once
    event_list = self._selector.select(timeout)
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/scrap.py", line 105, in <module>
    main()
  File "/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/scrap.py", line 83, in main
    result = smart_scraper_graph.run()
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/graphs/smart_scraper_graph.py", line 118, in run
    self.final_state, self.execution_info = self.graph.execute(inputs)
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/graphs/base_graph.py", line 171, in execute
    return self._execute_standard(initial_state)
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/graphs/base_graph.py", line 110, in _execute_standard
    result = current_node.execute(state)
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/nodes/fetch_node.py", line 160, in execute
    document = loader.load()
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/langchain_core/document_loaders/base.py", line 29, in load
    return list(self.lazy_load())
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/docloaders/chromium.py", line 105, in lazy_load
    html_content = asyncio.run(scraping_fn(url))
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/runners.py", line 47, in run
    _cancel_all_tasks(loop)
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/runners.py", line 63, in _cancel_all_tasks
    loop.run_until_complete(
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 634, in run_until_complete
    self.run_forever()
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 601, in run_forever
    self._run_once()
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/asyncio/base_events.py", line 1869, in _run_once
    event_list = self._selector.select(timeout)
  File "/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)
KeyboardInterrupt

2024-07-09 18:59:31,020 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.com/cell-phones/s?k=cell+phones
2024-07-09 19:00:05,739 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.com/cell-phones/s?k=cell+phones'], returncode=0, stdout='', stderr="2024-07-09 18:59:34,291 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.com/cell-phones/s?k=cell+phones\n2024-07-09 18:59:34,339 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-09 19:00:05,082 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:00:05,739 - INFO - Output lines: []
2024-07-09 19:00:05,739 - ERROR - No output from scrap.py
2024-07-09 19:02:51,253 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.in/s?i=electronics&bbn=1389401031&rh=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&dc&qid=1720530156&rnid=3837712031&ref=sr_nr_p_89_7&ds=v1%3AsL3o7%2BTND8Iy3Me6xvoABRX7rky%2FRcTaYOUO1kmCDG8
2024-07-09 19:03:42,157 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.daraz.com.bd/smartphones/
2024-07-09 19:04:21,832 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.daraz.com.bd/smartphones/'], returncode=0, stdout='', stderr="2024-07-09 19:03:49,048 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.daraz.com.bd/smartphones/\n2024-07-09 19:03:49,364 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-09 19:04:21,174 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:04:21,833 - INFO - Output lines: []
2024-07-09 19:04:21,833 - ERROR - No output from scrap.py
2024-07-09 19:05:11,980 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.walmart.com/cp/cell-phones/1105910
2024-07-09 19:06:10,652 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.daraz.com.bd/smartphones/
2024-07-09 19:06:45,881 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.daraz.com.bd/smartphones/'], returncode=0, stdout='', stderr="2024-07-09 19:06:14,444 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.daraz.com.bd/smartphones/\n2024-07-09 19:06:14,509 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-09 19:06:45,280 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:06:45,882 - INFO - Output lines: []
2024-07-09 19:06:45,882 - ERROR - No output from scrap.py
2024-07-09 19:07:26,297 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.daraz.com.bd/smartphones/benco-124622657--imam-124344089--apple--motorola--nillkin--realme-201624--tecno--honor--itel-123544848--zte--oppo--iphone-1--symphony--vivo--xiaomi-brand--nokia--walton-brand--infinix--oneplus/?from=sideFilters
2024-07-09 19:11:06,229 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products
source: https://www.buy.vendidit.com/search?category=37&page=1
2024-07-09 19:16:29,577 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.in/s?i=electronics&bbn=1389401031&rh=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&dc&qid=1720530156&rnid=3837712031&ref=sr_nr_p_89_7&ds=v1%3AsL3o7%2BTND8Iy3Me6xvoABRX7rky%2FRcTaYOUO1kmCDG8'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_brand_retail_price_price_20240709_191628.json\n', stderr='2024-07-09 19:02:54,713 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.in/s?i=electronics&bbn=1389401031&rh=n%3A1389401031%2Cp_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&dc&qid=1720530156&rnid=3837712031&ref=sr_nr_p_89_7&ds=v1%3AsL3o7%2BTND8Iy3Me6xvoABRX7rky%2FRcTaYOUO1kmCDG8\n2024-07-09 19:02:54,770 - INFO - Starting scraping...\n2024-07-09 19:03:01,447 - INFO - Content scraped\n2024-07-09 19:03:16,814 - INFO - Loading faiss with AVX512 support.\n2024-07-09 19:03:16,866 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 19:16:28,690 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_brand_retail_price_price_20240709_191628.json\n')
2024-07-09 19:16:29,579 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_brand_retail_price_price_20240709_191628.json']
2024-07-09 19:16:29,579 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_brand_retail_price_price_20240709_191628.json
2024-07-09 19:16:29,579 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazonin_List_me_product_id_source_brand_retail_price_price_20240709_191628.json found after 1 retries.
2024-07-09 19:16:29,579 - INFO - Output: {'items': [{'product_id': 'NA', 'source': 'https://www.amazon.in/gp/css/homepage.html?ref_=footer_covid', 'brand': 'NA', 'retail_price': '₹145', 'price': 'NA', 'category': 'NA', 'condition': 'New', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}, {'product_id': 'NA', 'source': 'https://www.amazon.in/gp/css/homepage.html?ref_=footer_covid', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'Electronics', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': '1389401031', 'upc': 'Apple, Nokia, OnePlus, Redmi, Samsung, boAt, realme', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}, {'product_id': 'NA', 'source': 'https://www.abebooks.com/', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'Books', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}, {'product_id': 'NA', 'source': 'https://www.amazon.in/business?ref=footer_aingw', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'Amazon Business', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}, {'product_id': 'NA', 'source': 'https://www.amazon.in/now?ref=footer_amznow', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'Amazon Now', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}, {'product_id': 'NA', 'source': 'https://www.amazon.in/music/prime?ref=footer_apm', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'Amazon Music', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}]}
2024-07-09 19:17:48,634 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.walmart.com/cp/cell-phones/1105910'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_191747.json\n', stderr='2024-07-09 19:05:17,089 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.walmart.com/cp/cell-phones/1105910\n2024-07-09 19:05:17,165 - INFO - Starting scraping...\n2024-07-09 19:05:28,621 - INFO - Content scraped\n2024-07-09 19:10:45,857 - INFO - Loading faiss with AVX512 support.\n2024-07-09 19:10:45,905 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 19:17:47,748 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_191747.json\n')
2024-07-09 19:17:48,635 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_191747.json']
2024-07-09 19:17:48,635 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_191747.json
2024-07-09 19:17:48,635 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_191747.json found after 1 retries.
2024-07-09 19:17:48,636 - INFO - Output: {'items': [{'product_id': 'NA', 'source': 'https://www.walmart.com/', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'NA', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}]}
2024-07-09 19:19:34,555 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products', '--source', 'https://www.buy.vendidit.com/search?category=37&page=1'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_191933.json\n', stderr='2024-07-09 19:11:13,052 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products\nsource: https://www.buy.vendidit.com/search?category=37&page=1\n2024-07-09 19:11:13,146 - INFO - Starting scraping...\n2024-07-09 19:11:20,802 - INFO - Content scraped\n2024-07-09 19:16:47,098 - INFO - Loading faiss with AVX512 support.\n2024-07-09 19:16:47,147 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 19:19:33,701 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_191933.json\n')
2024-07-09 19:19:34,556 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_191933.json']
2024-07-09 19:19:34,556 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_191933.json
2024-07-09 19:19:34,556 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_191933.json found after 1 retries.
2024-07-09 19:19:34,556 - INFO - Output: {'products': [{'product_id': 'NA', 'source': 'Vendidit', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'NA', 'condition': 'NA', 'description': 'No product available', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}]}
2024-07-09 19:21:14,813 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX6WVG5/ref=sr_1_1?dib=eyJ2IjoiMSJ9.wNLWACC_oGpJ-aL8mBmpWldBsfzguZxi0IVtJqX7JsugOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifOTXsdYXxcsjdMrTyE6LW2-7HBB98b1yoN8MT5PT_PZkSIFiL1rqo4inAZDPeG4zodNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZG9BKsSBAE2kX2vsjFMSjka9mP39bGzL6xEVAvoRO5MhQ.WgfYzz4RQyufAge_SiamEdpfSP1NEmCe6VFLe31OYqM&dib_tag=se&qid=1720530159&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1
2024-07-09 19:21:54,749 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX6WVG5/ref=sr_1_1?dib=eyJ2IjoiMSJ9.wNLWACC_oGpJ-aL8mBmpWldBsfzguZxi0IVtJqX7JsugOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifOTXsdYXxcsjdMrTyE6LW2-7HBB98b1yoN8MT5PT_PZkSIFiL1rqo4inAZDPeG4zodNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZG9BKsSBAE2kX2vsjFMSjka9mP39bGzL6xEVAvoRO5MhQ.WgfYzz4RQyufAge_SiamEdpfSP1NEmCe6VFLe31OYqM&dib_tag=se&qid=1720530159&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1'], returncode=0, stdout='', stderr="2024-07-09 19:21:21,968 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX6WVG5/ref=sr_1_1?dib=eyJ2IjoiMSJ9.wNLWACC_oGpJ-aL8mBmpWldBsfzguZxi0IVtJqX7JsugOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifOTXsdYXxcsjdMrTyE6LW2-7HBB98b1yoN8MT5PT_PZkSIFiL1rqo4inAZDPeG4zodNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZG9BKsSBAE2kX2vsjFMSjka9mP39bGzL6xEVAvoRO5MhQ.WgfYzz4RQyufAge_SiamEdpfSP1NEmCe6VFLe31OYqM&dib_tag=se&qid=1720530159&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1\n2024-07-09 19:21:22,113 - INFO - Starting scraping...\n2024-07-09 19:21:54,121 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:21:54,750 - INFO - Output lines: []
2024-07-09 19:21:54,750 - ERROR - No output from scrap.py
2024-07-09 19:22:09,010 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.walmart.com/browse/cell-phones/all-cell-phones/1105910_5296594
2024-07-09 19:22:30,067 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX6WVG5/ref=sr_1_1?dib=eyJ2IjoiMSJ9.wNLWACC_oGpJ-aL8mBmpWldBsfzguZxi0IVtJqX7JsugOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifOTXsdYXxcsjdMrTyE6LW2-7HBB98b1yoN8MT5PT_PZkSIFiL1rqo4inAZDPeG4zodNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZG9BKsSBAE2kX2vsjFMSjka9mP39bGzL6xEVAvoRO5MhQ.WgfYzz4RQyufAge_SiamEdpfSP1NEmCe6VFLe31OYqM&dib_tag=se&qid=1720530159&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1
2024-07-09 19:22:59,498 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products
source: https://www.buy.vendidit.com/product/37365
2024-07-09 19:23:05,399 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX6WVG5/ref=sr_1_1?dib=eyJ2IjoiMSJ9.wNLWACC_oGpJ-aL8mBmpWldBsfzguZxi0IVtJqX7JsugOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifOTXsdYXxcsjdMrTyE6LW2-7HBB98b1yoN8MT5PT_PZkSIFiL1rqo4inAZDPeG4zodNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZG9BKsSBAE2kX2vsjFMSjka9mP39bGzL6xEVAvoRO5MhQ.WgfYzz4RQyufAge_SiamEdpfSP1NEmCe6VFLe31OYqM&dib_tag=se&qid=1720530159&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1'], returncode=0, stdout='', stderr="2024-07-09 19:22:33,828 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.in/Redmi-Startrail-Storage-MediaTek-Dimensity/dp/B0CNX6WVG5/ref=sr_1_1?dib=eyJ2IjoiMSJ9.wNLWACC_oGpJ-aL8mBmpWldBsfzguZxi0IVtJqX7JsugOGsaV1dgsVeLOIN9drScDDWMzDj-miHOXeRxK_9ifOTXsdYXxcsjdMrTyE6LW2-7HBB98b1yoN8MT5PT_PZkSIFiL1rqo4inAZDPeG4zodNMChOBDTH1I2oFmpLdkpLM7fnkUTwe2uj_Tt0-SIFe8B8ZF-yPyOD7uCMalHvXMsSsF6u2mbHSlob4QoQARiZLl1y29ZUCrFqL9Rl0nDZG9BKsSBAE2kX2vsjFMSjka9mP39bGzL6xEVAvoRO5MhQ.WgfYzz4RQyufAge_SiamEdpfSP1NEmCe6VFLe31OYqM&dib_tag=se&qid=1720530159&refinements=p_89%3AApple%7CNokia%7COnePlus%7CRedmi%7CSamsung%7CboAt%7Crealme&rnid=3837712031&s=electronics&sr=1-1&th=1\n2024-07-09 19:22:33,876 - INFO - Starting scraping...\n2024-07-09 19:23:04,661 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:23:05,399 - INFO - Output lines: []
2024-07-09 19:23:05,399 - ERROR - No output from scrap.py
2024-07-09 19:24:58,922 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.in/POCO-Power-Black-128GB-Storage/dp/B0CDRVG19T/ref=pd_bxgy_thbs_d_sccl_1/262-9950755-0828224?pd_rd_w=SvgQy&content-id=amzn1.sym.f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_p=f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_r=YMF9GN336S3A43ADFW7Y&pd_rd_wg=7Y8rn&pd_rd_r=36a311f3-a915-465d-b7cf-91a793af50ac&pd_rd_i=B0CDRVG19T&psc=1
2024-07-09 19:25:34,556 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.in/POCO-Power-Black-128GB-Storage/dp/B0CDRVG19T/ref=pd_bxgy_thbs_d_sccl_1/262-9950755-0828224?pd_rd_w=SvgQy&content-id=amzn1.sym.f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_p=f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_r=YMF9GN336S3A43ADFW7Y&pd_rd_wg=7Y8rn&pd_rd_r=36a311f3-a915-465d-b7cf-91a793af50ac&pd_rd_i=B0CDRVG19T&psc=1'], returncode=0, stdout='', stderr="2024-07-09 19:25:02,965 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.in/POCO-Power-Black-128GB-Storage/dp/B0CDRVG19T/ref=pd_bxgy_thbs_d_sccl_1/262-9950755-0828224?pd_rd_w=SvgQy&content-id=amzn1.sym.f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_p=f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_r=YMF9GN336S3A43ADFW7Y&pd_rd_wg=7Y8rn&pd_rd_r=36a311f3-a915-465d-b7cf-91a793af50ac&pd_rd_i=B0CDRVG19T&psc=1\n2024-07-09 19:25:03,028 - INFO - Starting scraping...\n2024-07-09 19:25:33,855 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:25:34,557 - INFO - Output lines: []
2024-07-09 19:25:34,557 - ERROR - No output from scrap.py
2024-07-09 19:26:04,962 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.target.com/c/cell-phones-electronics/-/N-5xte8
2024-07-09 19:26:29,739 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.in/POCO-Power-Black-128GB-Storage/dp/B0CDRVG19T/ref=pd_bxgy_thbs_d_sccl_1/262-9950755-0828224?pd_rd_w=SvgQy&content-id=amzn1.sym.f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_p=f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_r=YMF9GN336S3A43ADFW7Y&pd_rd_wg=7Y8rn&pd_rd_r=36a311f3-a915-465d-b7cf-91a793af50ac&pd_rd_i=B0CDRVG19T&th=1
2024-07-09 19:26:40,468 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.target.com/c/cell-phones-electronics/-/N-5xte8'], returncode=0, stdout='', stderr="2024-07-09 19:26:08,937 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.target.com/c/cell-phones-electronics/-/N-5xte8\n2024-07-09 19:26:08,998 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-09 19:26:39,794 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:26:40,469 - INFO - Output lines: []
2024-07-09 19:26:40,469 - ERROR - No output from scrap.py
2024-07-09 19:27:05,207 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.in/POCO-Power-Black-128GB-Storage/dp/B0CDRVG19T/ref=pd_bxgy_thbs_d_sccl_1/262-9950755-0828224?pd_rd_w=SvgQy&content-id=amzn1.sym.f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_p=f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_r=YMF9GN336S3A43ADFW7Y&pd_rd_wg=7Y8rn&pd_rd_r=36a311f3-a915-465d-b7cf-91a793af50ac&pd_rd_i=B0CDRVG19T&th=1'], returncode=0, stdout='', stderr="2024-07-09 19:26:33,658 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.in/POCO-Power-Black-128GB-Storage/dp/B0CDRVG19T/ref=pd_bxgy_thbs_d_sccl_1/262-9950755-0828224?pd_rd_w=SvgQy&content-id=amzn1.sym.f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_p=f406cf11-1229-4650-9e74-6c521f43ef93&pf_rd_r=YMF9GN336S3A43ADFW7Y&pd_rd_wg=7Y8rn&pd_rd_r=36a311f3-a915-465d-b7cf-91a793af50ac&pd_rd_i=B0CDRVG19T&th=1\n2024-07-09 19:26:33,717 - INFO - Starting scraping...\n2024-07-09 19:27:04,586 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:27:05,207 - INFO - Output lines: []
2024-07-09 19:27:05,207 - ERROR - No output from scrap.py
2024-07-09 19:33:09,759 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.target.com/c/iphone/-/N-4y71u
2024-07-09 19:33:39,543 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.in/dp/B0CVKVGZP1/ref=sspa_dk_detail_0?psc=1&pd_rd_i=B0CVKVGZP1&pd_rd_w=Rv9bk&content-id=amzn1.sym.9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_p=9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_r=R6MMTGR130FT12N0WRWQ&pd_rd_wg=eHwvO&pd_rd_r=507e4754-30ff-4e87-a4dd-731eaf9dc34c&sp_csd=d2lkZ2V0TmFtZT1zcF9kZXRhaWxfdGhlbWF0aWM
2024-07-09 19:34:15,257 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.in/dp/B0CVKVGZP1/ref=sspa_dk_detail_0?psc=1&pd_rd_i=B0CVKVGZP1&pd_rd_w=Rv9bk&content-id=amzn1.sym.9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_p=9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_r=R6MMTGR130FT12N0WRWQ&pd_rd_wg=eHwvO&pd_rd_r=507e4754-30ff-4e87-a4dd-731eaf9dc34c&sp_csd=d2lkZ2V0TmFtZT1zcF9kZXRhaWxfdGhlbWF0aWM'], returncode=0, stdout='', stderr="2024-07-09 19:33:43,685 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.in/dp/B0CVKVGZP1/ref=sspa_dk_detail_0?psc=1&pd_rd_i=B0CVKVGZP1&pd_rd_w=Rv9bk&content-id=amzn1.sym.9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_p=9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_r=R6MMTGR130FT12N0WRWQ&pd_rd_wg=eHwvO&pd_rd_r=507e4754-30ff-4e87-a4dd-731eaf9dc34c&sp_csd=d2lkZ2V0TmFtZT1zcF9kZXRhaWxfdGhlbWF0aWM\n2024-07-09 19:33:43,748 - INFO - Starting scraping...\n2024-07-09 19:34:14,587 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:34:15,258 - INFO - Output lines: []
2024-07-09 19:34:15,259 - ERROR - No output from scrap.py
2024-07-09 19:36:12,295 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.in/dp/B0CVKVGZP1/ref=sspa_dk_detail_0?psc=1&pd_rd_i=B0CVKVGZP1&pd_rd_w=Rv9bk&content-id=amzn1.sym.9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_p=9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_r=R6MMTGR130FT12N0WRWQ&pd_rd_wg=eHwvO&pd_rd_r=507e4754-30ff-4e87-a4dd-731eaf9dc34c&sp_csd=d2lkZ2V0TmFtZT1zcF9kZXRhaWxfdGhlbWF0aWM
2024-07-09 19:37:00,154 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.in/dp/B0CVKVGZP1/ref=sspa_dk_detail_0?psc=1&pd_rd_i=B0CVKVGZP1&pd_rd_w=Rv9bk&content-id=amzn1.sym.9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_p=9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_r=R6MMTGR130FT12N0WRWQ&pd_rd_wg=eHwvO&pd_rd_r=507e4754-30ff-4e87-a4dd-731eaf9dc34c&sp_csd=d2lkZ2V0TmFtZT1zcF9kZXRhaWxfdGhlbWF0aWM'], returncode=0, stdout='', stderr="2024-07-09 19:36:22,707 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.in/dp/B0CVKVGZP1/ref=sspa_dk_detail_0?psc=1&pd_rd_i=B0CVKVGZP1&pd_rd_w=Rv9bk&content-id=amzn1.sym.9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_p=9f1cb690-f0b7-44de-b6ff-1bad1e37d3f0&pf_rd_r=R6MMTGR130FT12N0WRWQ&pd_rd_wg=eHwvO&pd_rd_r=507e4754-30ff-4e87-a4dd-731eaf9dc34c&sp_csd=d2lkZ2V0TmFtZT1zcF9kZXRhaWxfdGhlbWF0aWM\n2024-07-09 19:36:22,820 - INFO - Starting scraping...\n2024-07-09 19:36:59,252 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:37:00,155 - INFO - Output lines: []
2024-07-09 19:37:00,156 - ERROR - No output from scrap.py
2024-07-09 19:43:13,119 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products
source: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011
2024-07-09 19:43:25,523 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products
source: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011
2024-07-09 19:44:32,072 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products', '--source', 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011'], returncode=0, stdout='', stderr="2024-07-09 19:43:56,086 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products\nsource: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011\n2024-07-09 19:43:56,200 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-09 19:44:30,352 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 19:44:32,081 - INFO - Output lines: []
2024-07-09 19:44:32,082 - ERROR - No output from scrap.py
2024-07-09 19:49:59,676 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products
source: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011
2024-07-09 20:06:29,096 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.daraz.com.bd/smartphones/benco-124622657--imam-124344089--apple--motorola--nillkin--realme-201624--tecno--honor--itel-123544848--zte--oppo--iphone-1--symphony--vivo--xiaomi-brand--nokia--walton-brand--infinix--oneplus/?from=sideFilters'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_brand_retail_price_price_20240709_200620.json\n', stderr='2024-07-09 19:07:30,302 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.daraz.com.bd/smartphones/benco-124622657--imam-124344089--apple--motorola--nillkin--realme-201624--tecno--honor--itel-123544848--zte--oppo--iphone-1--symphony--vivo--xiaomi-brand--nokia--walton-brand--infinix--oneplus/?from=sideFilters\n2024-07-09 19:07:30,354 - INFO - Starting scraping...\n2024-07-09 19:07:55,861 - INFO - Content scraped\n2024-07-09 19:19:52,623 - INFO - Loading faiss with AVX512 support.\n2024-07-09 19:19:52,682 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 20:06:20,260 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_brand_retail_price_price_20240709_200620.json\n')
2024-07-09 20:06:29,099 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_brand_retail_price_price_20240709_200620.json']
2024-07-09 20:06:29,099 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_brand_retail_price_price_20240709_200620.json
2024-07-09 20:06:29,100 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/darazcombd_List_me_product_id_source_brand_retail_price_price_20240709_200620.json found after 1 retries.
2024-07-09 20:06:29,102 - INFO - Output: {'title': 'Smart Phones on Daraz: Find the Best Deals with Free Delivery & Wholesale Price!', 'header': '<h1>Smart Phones on Daraz: Find the Best Deals with Free Delivery & Wholesale Price!</h1>', 'content': [{'title': 'Brands:', 'options': ['Realme', 'Tecno', 'Infinix', 'Walton', 'Benco', 'iphone', 'Apple', 'Vivo', 'Nillkin', 'Honor', 'OPPO', 'Symphony', 'Imam', 'Motorola', 'ZTE', 'Nokia', 'Xiaomi', 'itel', 'OnePlus'], 'type': 'select'}, {'title': 'Sort By:', 'options': ['Best Match'], 'type': 'text'}, {'title': 'Show:', 'options': ['7.7 products only'], 'type': 'text'}, {'title': 'Products:', 'items': [{'__symlink': '/products/symphony-z60-plus-6-gb-128-gb-i316948918-s1436466194.html?search=1', 'name': 'Symphony Z60 Plus ( 6 GB/ 128 GB)', 'rating': '4.6/5(151)', 'sold': '897 Sold', 'vouchers': '4 Vouchers', 'price': '₹11,099', 'discountedPrice': '~~ ₹ 11,999 ~~'}, {'__symlink': '/products/realme-c55-6gb128gb-i307550053-s1379503632.html?search=1', 'name': 'Realme C55 - (6GB/128GB)', 'rating': '4.7/5(202)', 'sold': '1K Sold', 'vouchers': '4 Vouchers', 'price': '₹19,562', 'discountedPrice': '~~ ₹ 19,999 ~~'}, {'__symlink': '/products/imam-i8-ram-3gbrom-32gb3100mah-i316661652-s1434300569.html?search=1', 'name': 'Imam i8 Dhalia (RAM-3GB/ROM-32GB)3100mAH Mobile Phone', 'rating': '3.7/5(47)', 'sold': '701 Sold', 'vouchers': 'Free Delivery', 'price': '₹3,698'}, {'__symlink': '/products/honor-x7b-8-256gb-large-storage-6-8-inch-hyper-transmissive-large-screen-6000mAh-3-days-battery-life-108mp-camera-ultra-wide-angle-lens-quad-camera-4g-smartphone-i3251598746-s1543987659.html', 'name': 'Honor X7b (8/256GB) Large Storage 6.8-inch Hyper Transmissive Large Screen, 6000mAh Battery Life, 108MP Camera, Ultra Wide Angle Lens Quad Camera, 4G Smartphone', 'rating': '4.3/5(7)', 'sold': '2 Sold', 'vouchers': '', 'price': '₹18,990'}, {'__symlink': '/products/symphony-innova-30-8-128-smartphone-i3247567217-s1543620033.html', 'name': 'Symphony Innova 30 (8/128) Smartphone', 'rating': '4.7/5(16)', 'sold': '148 Sold', 'vouchers': '4 Vouchers', 'price': '₹12,649'}, {'__symlink': '/products/tecno-spark-go-2024-4gb-64gb-smartphone-i3251847929-s1544187450.html', 'name': 'Tecno Spark Go 2024 4GB/64GB Smartphone - official', 'rating': '4.8/5(12)', 'sold': '52 Sold', 'vouchers': '3 Vouchers', 'price': '₹10,610', 'discountedPrice': '~~ ₹ 10,690 ~~'}]}, {'title': "<a href='https://www.daraz.com'>Shop Now on Daraz</a>"}]}
2024-07-09 20:13:57,944 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.walmart.com/browse/cell-phones/all-cell-phones/1105910_5296594'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_201354.json\n', stderr='2024-07-09 19:22:14,108 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.walmart.com/browse/cell-phones/all-cell-phones/1105910_5296594\n2024-07-09 19:22:14,161 - INFO - Starting scraping...\n2024-07-09 19:22:17,736 - INFO - Content scraped\n2024-07-09 19:35:38,736 - INFO - Loading faiss with AVX512 support.\n2024-07-09 19:35:38,817 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 20:13:54,891 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_201354.json\n')
2024-07-09 20:13:57,945 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_201354.json']
2024-07-09 20:13:57,945 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_201354.json
2024-07-09 20:13:57,945 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_201354.json found after 1 retries.
2024-07-09 20:13:57,946 - INFO - Output: {'data': [{'product_id': 'NA', 'source': 'https://www.walmart.com/', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'NA', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}]}
2024-07-09 20:24:47,759 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.target.com/c/iphone/-/N-4y71u'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/targetcom_List_me_product_id_source_brand_retail_price_price_20240709_202310.json\n', stderr='2024-07-09 19:33:14,926 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.target.com/c/iphone/-/N-4y71u\n2024-07-09 19:33:14,999 - INFO - Starting scraping...\n2024-07-09 19:33:36,764 - INFO - Content scraped\n2024-07-09 20:06:42,593 - INFO - Loading faiss with AVX512 support.\n2024-07-09 20:06:42,733 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 20:23:10,934 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/targetcom_List_me_product_id_source_brand_retail_price_price_20240709_202310.json\n')
2024-07-09 20:24:47,777 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/targetcom_List_me_product_id_source_brand_retail_price_price_20240709_202310.json']
2024-07-09 20:24:47,778 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/targetcom_List_me_product_id_source_brand_retail_price_price_20240709_202310.json
2024-07-09 20:24:47,778 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/targetcom_List_me_product_id_source_brand_retail_price_price_20240709_202310.json found after 1 retries.
2024-07-09 20:24:47,779 - INFO - Output: {'products': [{'product_id': '', 'source': 'https://www.target.com', 'brand': '', 'retail_price': '', 'price': '', 'category': 'electronics', 'condition': '', 'description': 'Free 2-Day Shipping: When you use your Target CircleTM Card (debit, credit, and reloadable) for your Target.com purchases or are a Target Circle 360TM member, you receive free standard shipping on most items and free 2-day shipping on eligible items. Hundreds of thousands of items qualify for 2-day shipping. Item eligibility and assortment vary by market and are determined by the location of the item and the destination ZIP code.', 'lead': '', 'quantity': '', 'sku': '', 'upc': '', 'ean': '', 'isbn': '', 'mpn': '', 'jan': '', 'part_number': '', 'model_number': '', 'asin': '', 'created_at': '', 'updated_at': ''}]}
2024-07-09 20:29:00,893 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products', '--source', 'https://www.buy.vendidit.com/product/37365'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_202846.json\n', stderr='2024-07-09 19:23:03,603 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products\nsource: https://www.buy.vendidit.com/product/37365\n2024-07-09 19:23:03,662 - INFO - Starting scraping...\n2024-07-09 19:23:18,759 - INFO - Content scraped\n2024-07-09 20:06:43,255 - INFO - Loading faiss with AVX512 support.\n2024-07-09 20:06:43,551 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 20:28:46,601 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_202846.json\n')
2024-07-09 20:29:00,894 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_202846.json']
2024-07-09 20:29:00,894 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_202846.json
2024-07-09 20:29:00,894 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/buyvendiditcom_List_me_product_id_source_brand_retail_price_price_20240709_202846.json found after 1 retries.
2024-07-09 20:29:00,895 - INFO - Output: {'products': [{'product_id': 'DEWALT 20V MAX POWERSTACK Compact Battery', 'source': 'buy.vendidit.com', 'brand': 'DEWALT', 'retail_price': '$129', 'price': '$24', 'category': 'Electronics', 'condition': 'Like New', 'description': 'Damaged? : No\nIn Packaging? : No\nAssembly Required? : No\nMissing Parts? : No\nFunctional? : No\nUPC: NOUPC{1277485}', 'lead': '', 'quantity': '1', 'sku': 'NOUPC1277485', 'upc': 'NOUPC1277485', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'Not provided', 'updated_at': 'Not provided'}]}
2024-07-09 20:45:17,079 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products', '--source', 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_204513.json\n', stderr='2024-07-09 19:50:14,839 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products\nsource: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011\n2024-07-09 19:50:15,084 - INFO - Starting scraping...\n2024-07-09 19:50:45,072 - INFO - Content scraped\n2024-07-09 20:29:08,417 - INFO - Loading faiss with AVX512 support.\n2024-07-09 20:29:08,604 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 20:45:13,490 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_204513.json\n')
2024-07-09 20:45:17,080 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_204513.json']
2024-07-09 20:45:17,081 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_204513.json
2024-07-09 20:45:17,081 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_204513.json found after 1 retries.
2024-07-09 20:45:17,090 - INFO - Output: {'products': [{'name': '$149.00 Android 11 Unlocked Smartphone | 3-Day Battery | Dual SIM | 3/32GB | 6.52-Inch Screen | Not Compatible with Verizon or AT&T;', 'rating': '4.1 out of 5 stars', 'reviews': '24', 'price': '$149.00', 'availability': 'Delivery Mon, Jul 29', 'ship_to': 'Bangladesh'}, {'name': '$236.26 Moto G 5G | 2022 | Blue', 'rating': '4.1 out of 5 stars', 'reviews': '9,934', 'price': '$236.26', 'availability': 'Only 1 left in stock - order soon.', 'additional_info': ['Amazon Music offer with this purchase', 'Delivery Mon, Jul 29', 'Ships to Bangladesh']}, {'name': '$89.99 Nokia C21 Plus | Android 11 (Go Edition) | Unlocked GSM Smartphone | 2-Day Battery | Dual SIM | 3/32GB | 6.52-Inch Screen | Charcoal | Not Compatible with Verizon or AT&T;', 'rating': '4.1 out of 5 stars', 'reviews': '24', 'price': '$89.99', 'availability': 'Delivery Tue, Jul 23', 'ship_to': 'Bangladesh'}, {'name': '$105.99 Google Pixel 4 - Just Black - 64GB - Unlocked', 'rating': '4.1 out of 5 stars', 'reviews': '2,249', 'price': '$105.99', 'availability': '', 'sustainability_features': ['Energy efficiency - Conserves energy compared to similar products.', 'As certified by EPEAT']}, {'name': '$105.99 Google Pixel 4 - Clearly White - 64GB - Unlocked', 'rating': '4.1 out of 5 stars', 'reviews': '2,249', 'price': '$105.99', 'availability': '', 'sustainability_features': ['Energy efficiency - Conserves energy compared to similar products.', 'As certified by EPEAT']}], 'images': ['https://fls-na.amazon.com/1/batch/1/OP/ATVPDKIKX0DER:135-9425264-6212508:K0B1RT3W6BTDDK5CKEGX$uedata=s:%2Frd%2Fuedata%3Fstaticb%26id%3DK0B1RT3W6BTDDK5CKEGX:0', 'https://m.media-amazon.com/images/I/61K1Fz5LxvL._AC_UL320_.jpg', 'https://m.media-amazon.com/images/I/41nbiLV-e3L._AC_US40_.jpg', 'https://m.media-amazon.com/images/I/41Fh2y2r3CL._AC_US40_.jpg', 'https://m.media-amazon.com/images/I/416et7LUcwL._AC_US40_.jpg', 'https://m.media-amazon.com/images/I/71K-HMTsGHL._AC_UL320_.jpg', 'https://m.media-amazon.com/images/I/41STgQs7-mL._AC_US40_.jpg', 'https://m.media-amazon.com/images/I/412R6G9vv5L._AC_US40_.jpg']}
2024-07-09 21:14:40,644 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products', '--source', 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_211434.json\n', stderr='2024-07-09 19:43:56,086 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products\nsource: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011\n2024-07-09 19:43:56,200 - INFO - Starting scraping...\n2024-07-09 19:44:20,983 - INFO - Content scraped\n2024-07-09 20:29:11,281 - INFO - Loading faiss with AVX512 support.\n2024-07-09 20:29:13,299 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 21:14:34,986 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_211434.json\n')
2024-07-09 21:14:40,646 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_211434.json']
2024-07-09 21:14:40,646 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_211434.json
2024-07-09 21:14:40,646 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_211434.json found after 1 retries.
2024-07-09 21:14:40,647 - INFO - Output: {'data': [{'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_1&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}, {'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_2&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}, {'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_3&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}, {'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_4&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}, {'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_5&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}, {'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_6&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}, {'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_7&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}, {'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_8&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}, {'Link': 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011%2Cp_n_feature_twenty-four_browse-bin%3A23484212011&dc;&qid;=1720532641&rnid;=11636674011&ref=sr_nr_p_n_feature_twenty-four_browse-bin_9&ds;=v1%3AsVYa8jFt1YC2kLlqfKQhVjPm5gZJMUkjcJG04XaJEp', 'Title': 'Cell Phones & Smartphone Accessories'}]}
2024-07-09 21:24:23,401 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.target.com/c/iphone/-/N-4y71u
2024-07-09 21:25:23,736 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.target.com/c/iphone/-/N-4y71u'], returncode=0, stdout='', stderr='2024-07-09 21:24:40,700 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.target.com/c/iphone/-/N-4y71u\n2024-07-09 21:24:41,000 - INFO - Starting scraping...\n2024-07-09 21:24:59,930 - INFO - Content scraped\n2024-07-09 21:25:22,442 - INFO - Loading faiss with AVX512 support.\n2024-07-09 21:25:22,546 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 21:25:23,130 - ERROR - Error during SmartScraperGraph execution: Ollama call failed with status code 404. Maybe your model is not found and you should pull the model with `ollama pull mixtral:8x22b-instruct`.\n')
2024-07-09 21:25:23,737 - INFO - Output lines: []
2024-07-09 21:25:23,737 - ERROR - No output from scrap.py
2024-07-09 21:26:42,374 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.buy.vendidit.com/search?category=37&page=1
2024-07-09 21:27:21,614 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.buy.vendidit.com/search?category=37&page=1'], returncode=0, stdout='', stderr="2024-07-09 21:26:49,025 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.buy.vendidit.com/search?category=37&page=1\n2024-07-09 21:26:49,150 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-09 21:27:20,970 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 21:27:21,615 - INFO - Output lines: []
2024-07-09 21:27:21,615 - ERROR - No output from scrap.py
2024-07-09 21:27:44,278 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.buy.vendidit.com/product/37365
2024-07-09 21:28:18,090 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.buy.vendidit.com/product/37365'], returncode=0, stdout='', stderr='2024-07-09 21:27:50,648 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.buy.vendidit.com/product/37365\n2024-07-09 21:27:50,737 - INFO - Starting scraping...\n2024-07-09 21:28:15,704 - INFO - Content scraped\n2024-07-09 21:28:16,958 - INFO - Loading faiss with AVX512 support.\n2024-07-09 21:28:17,009 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 21:28:17,565 - ERROR - Error during SmartScraperGraph execution: Ollama call failed with status code 404. Maybe your model is not found and you should pull the model with `ollama pull mixtral:8x22b-instruct`.\n')
2024-07-09 21:28:18,090 - INFO - Output lines: []
2024-07-09 21:28:18,091 - ERROR - No output from scrap.py
2024-07-09 21:31:41,493 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products
source: https://www.target.com/c/iphone/-/N-4y71u
2024-07-09 21:32:16,241 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products', '--source', 'https://www.target.com/c/iphone/-/N-4y71u'], returncode=0, stdout='', stderr="2024-07-09 21:31:44,761 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products\nsource: https://www.target.com/c/iphone/-/N-4y71u\n2024-07-09 21:31:44,816 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-09 21:32:15,724 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 21:32:16,242 - INFO - Output lines: []
2024-07-09 21:32:16,242 - ERROR - No output from scrap.py
2024-07-09 21:32:54,319 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102
2024-07-09 21:36:38,707 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products
source: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011
2024-07-09 21:40:27,459 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_214026.json\n', stderr='2024-07-09 21:32:57,652 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102\n2024-07-09 21:32:57,704 - INFO - Starting scraping...\n2024-07-09 21:33:04,715 - INFO - Content scraped\n2024-07-09 21:33:05,578 - INFO - Loading faiss with AVX512 support.\n2024-07-09 21:33:05,597 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 21:40:26,409 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_214026.json\n')
2024-07-09 21:40:27,460 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_214026.json']
2024-07-09 21:40:27,461 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_214026.json
2024-07-09 21:40:27,461 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_214026.json found after 1 retries.
2024-07-09 21:40:27,461 - INFO - Output: {'data': [{'product_id': 'NA', 'source': 'https://www.walmart.com/', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'NA', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}]}
2024-07-09 21:44:59,874 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.amazon.com/Moto-3-Day-Battery-Unlocked-Camera/dp/B0BQ118F2T/ref=sr_1_1?dib=eyJ2IjoiMSJ9.JBgEWWANFQM0UxbTM5Lhjkhla6OPTOmP96MiCB8KKbjV3TWXRbBwfimStTKWBKPPLseZo4Kv-DdJqL_zcONht1e9dW2MXxjrWmGGOOw-aViD2e-Q9z8DmEyipvxnAAW7jm3cusEmiOot2c1EhXEJO8U_DexVtrBQ-vZSl2MqfmGgvNV1vABTIgFPeYhYwn6RZpXrxcVkSYloPW0jDU_3ZHKaR1KJ6WV4tXDcmeykqua0XIFQTIwJMtMSyDv9Z1Mm0iuIALR6QiJoCLiA-aGsO3o0gKWHoWeevudWPhrUA2o._Mqc5kWN9FCYieV5bKE6p9HOAYhWfv-_MD5KywD7QxI&dib_tag=se&qid=1720532554&refinements=p_n_feature_eleven_browse-bin%3A14674898011&s=wireless&sr=1-1&th=1
2024-07-09 21:45:57,640 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.amazon.com/Moto-3-Day-Battery-Unlocked-Camera/dp/B0BQ118F2T/ref=sr_1_1?dib=eyJ2IjoiMSJ9.JBgEWWANFQM0UxbTM5Lhjkhla6OPTOmP96MiCB8KKbjV3TWXRbBwfimStTKWBKPPLseZo4Kv-DdJqL_zcONht1e9dW2MXxjrWmGGOOw-aViD2e-Q9z8DmEyipvxnAAW7jm3cusEmiOot2c1EhXEJO8U_DexVtrBQ-vZSl2MqfmGgvNV1vABTIgFPeYhYwn6RZpXrxcVkSYloPW0jDU_3ZHKaR1KJ6WV4tXDcmeykqua0XIFQTIwJMtMSyDv9Z1Mm0iuIALR6QiJoCLiA-aGsO3o0gKWHoWeevudWPhrUA2o._Mqc5kWN9FCYieV5bKE6p9HOAYhWfv-_MD5KywD7QxI&dib_tag=se&qid=1720532554&refinements=p_n_feature_eleven_browse-bin%3A14674898011&s=wireless&sr=1-1&th=1'], returncode=0, stdout='', stderr="2024-07-09 21:45:17,894 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.amazon.com/Moto-3-Day-Battery-Unlocked-Camera/dp/B0BQ118F2T/ref=sr_1_1?dib=eyJ2IjoiMSJ9.JBgEWWANFQM0UxbTM5Lhjkhla6OPTOmP96MiCB8KKbjV3TWXRbBwfimStTKWBKPPLseZo4Kv-DdJqL_zcONht1e9dW2MXxjrWmGGOOw-aViD2e-Q9z8DmEyipvxnAAW7jm3cusEmiOot2c1EhXEJO8U_DexVtrBQ-vZSl2MqfmGgvNV1vABTIgFPeYhYwn6RZpXrxcVkSYloPW0jDU_3ZHKaR1KJ6WV4tXDcmeykqua0XIFQTIwJMtMSyDv9Z1Mm0iuIALR6QiJoCLiA-aGsO3o0gKWHoWeevudWPhrUA2o._Mqc5kWN9FCYieV5bKE6p9HOAYhWfv-_MD5KywD7QxI&dib_tag=se&qid=1720532554&refinements=p_n_feature_eleven_browse-bin%3A14674898011&s=wireless&sr=1-1&th=1\n2024-07-09 21:45:18,090 - INFO - Starting scraping...\n2024-07-09 21:45:55,834 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-09 21:45:57,653 - INFO - Output lines: []
2024-07-09 21:45:57,653 - ERROR - No output from scrap.py
2024-07-09 21:47:03,150 - INFO - Received scrape request with...
prompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below
source: https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102
2024-07-09 22:45:34,059 - INFO - Received scrape request with...
prompt: List me all the product links from the URL
source: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&page=3
2024-07-09 23:25:28,630 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products', '--source', 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_232515.json\n', stderr='2024-07-09 21:36:59,944 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information for all products\nsource: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?rh=n%3A7072561011%2Cp_n_feature_eleven_browse-bin%3A14674898011\n2024-07-09 21:37:00,392 - INFO - Starting scraping...\n2024-07-09 21:37:18,392 - INFO - Content scraped\n2024-07-09 21:41:00,929 - INFO - Loading faiss with AVX512 support.\n2024-07-09 21:41:00,992 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 23:25:15,955 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_232515.json\n')
2024-07-09 23:25:28,637 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_232515.json']
2024-07-09 23:25:28,637 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_232515.json
2024-07-09 23:25:28,639 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_product_id_source_brand_retail_price_price_20240709_232515.json found after 1 retries.
2024-07-09 23:25:28,643 - INFO - Output: {'title': 'Amazon Wireless Devices', 'chunk1': {'items': [{'title': 'Apple iPhone 13 Pro - Graphite', 'link': 'https://www.amazon.com/Apple-iPhone-13-Pro-Graphite/dp/B09JHF27M4/ref=sr_1_1?dchild=1&keywords=apple%2BiPhone%2613%26Pro&qid=1632234685&s=wireless&sr=1-1', 'image': 'https://m.media-amazon.com/images/I/71GvUrXKwYL._AC_SL1500_.jpg'}, {'title': 'Apple iPhone 13 Pro Max - Silver', 'link': 'https://www.amazon.com/Apple-iPhone-13-Pro-Max-Silver/dp/B09JHF27Q8/ref=sr_1_2?dchild=1&keywords=apple%2BiPhone%2613%26Pro%2BMax&qid=1632234685&s=wireless&sr=1-2', 'image': 'https://m.media-amazon.com/images/I/71JvwCWBQTL._AC_SL1500_.jpg'}]}, 'chunk2': {'items': [{'title': 'Samsung Galaxy S21 Ultra - Phantom Black', 'link': 'https://www.amazon.com/Samsung-Galaxy-Ultra-Phantom-Unlocked/dp/B08W2HNJ1T/ref=sr_1_1?dchild=1&keywords=samsung%2BGalaxy%2BS21%2BUltra&qid=1632234685&s=wireless&sr=1-1', 'image': 'https://m.media-amazon.com/images/I/71vYGb6KhFL._AC_SL1500_.jpg'}, {'title': 'Samsung Galaxy S21 + - Phantom Silver', 'link': 'https://www.amazon.com/Samsung-Galaxy-Unlocked-Phantom-Silver/dp/B08W3RZ21J/ref=sr_1_2?dchild=1&keywords=samsung%2BGalaxy%2BS21+&qid=1632234685&s=wireless&sr=1-2', 'image': 'https://m.media-amazon.com/images/I/71bJWGjVuPL._AC_SL1500_.jpg'}]}, 'chunk3': {'items': [{'title': 'Google Pixel 6 - Stormy Black', 'link': 'https://www.amazon.com/Google-Pixel-Stormy-Black-Unlocked/dp/B09JLWV2P5/ref=sr_1_1?dchild=1&keywords=google%2BPixel%2B6&qid=1632234685&s=wireless&sr=1-1', 'image': 'https://m.media-amazon.com/images/I/71GyRUhNJiL._AC_SL1500_.jpg'}]}}
2024-07-09 23:27:11,993 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below', '--source', 'https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_232707.json\n', stderr='2024-07-09 21:47:23,720 - INFO - Starting scrape with...\nprompt: List me product_id, source, brand, retail_price, price, category, condition, description, lead, quantity, sku, upc, ean, isbn, mpn, jan, part_number, model_number, asin, created_at, and updated_at information if found from the URLs below\nsource: https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102\n2024-07-09 21:47:24,008 - INFO - Starting scraping...\n2024-07-09 21:47:41,699 - INFO - Content scraped\n2024-07-09 23:12:04,427 - INFO - Loading faiss with AVX512 support.\n2024-07-09 23:12:12,774 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 23:27:07,173 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_232707.json\n')
2024-07-09 23:27:11,994 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_232707.json']
2024-07-09 23:27:11,994 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_232707.json
2024-07-09 23:27:11,994 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_List_me_product_id_source_brand_retail_price_price_20240709_232707.json found after 1 retries.
2024-07-09 23:27:11,995 - INFO - Output: {'products': [{'product_id': 'NA', 'source': 'Walmart', 'brand': 'NA', 'retail_price': 'NA', 'price': 'NA', 'category': 'NA', 'condition': 'NA', 'description': 'NA', 'lead': 'NA', 'quantity': 'NA', 'sku': 'NA', 'upc': 'NA', 'ean': 'NA', 'isbn': 'NA', 'mpn': 'NA', 'jan': 'NA', 'part_number': 'NA', 'model_number': 'NA', 'asin': 'NA', 'created_at': 'NA', 'updated_at': 'NA'}]}
2024-07-09 23:43:23,389 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me all the product links from the URL', '--source', 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&page=3'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_from_the_URL_20240709_234320.json\n', stderr='2024-07-09 22:45:53,100 - INFO - Starting scrape with...\nprompt: List me all the product links from the URL\nsource: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&page=3\n2024-07-09 22:45:53,284 - INFO - Starting scraping...\n2024-07-09 22:46:26,182 - INFO - Content scraped\n2024-07-09 23:27:33,569 - INFO - Loading faiss with AVX512 support.\n2024-07-09 23:27:33,711 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-09 23:43:20,082 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_from_the_URL_20240709_234320.json\n')
2024-07-09 23:43:23,391 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_from_the_URL_20240709_234320.json']
2024-07-09 23:43:23,391 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_from_the_URL_20240709_234320.json
2024-07-09 23:43:23,391 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_from_the_URL_20240709_234320.json found after 1 retries.
2024-07-09 23:43:23,391 - INFO - Output: {'title': '', 'items': [{'name': 'Product Title', 'imageUrl': 'URL_of_product_image', 'url': 'URL_where_the_product_can_be_purchased'}, {'name': 'View Reviews', 'url': 'URL_for_viewing_reviews'}, {'name': 'View More Reviews', 'url': 'URL_for_viewing_more_reviews'}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': '', 'imageUrl': 'URL_of_product_image', 'url': ''}, {'title': 'Gif for Loading State', 'imageUrl': 'URL_of_loading_state_gif', 'url': ''}]}
2024-07-10 00:11:48,057 - INFO - Received scrape request with...
prompt: List me all the product links
source: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&page=3
2024-07-10 00:14:43,494 - INFO - Received scrape request with...
prompt: list me all the product urls
source: https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102
2024-07-10 00:28:03,473 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me all the product links', '--source', 'https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&page=3'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_20240710_002802.json\n', stderr='2024-07-10 00:11:53,849 - INFO - Starting scrape with...\nprompt: List me all the product links\nsource: https://www.amazon.com/Cell-Phones-Smartphone-Accessories/s?i=mobile&page=3\n2024-07-10 00:11:53,941 - INFO - Starting scraping...\n2024-07-10 00:12:03,362 - INFO - Content scraped\n2024-07-10 00:12:21,491 - INFO - Loading faiss with AVX512 support.\n2024-07-10 00:12:21,536 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-10 00:28:02,523 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_20240710_002802.json\n')
2024-07-10 00:28:03,475 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_20240710_002802.json']
2024-07-10 00:28:03,475 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_20240710_002802.json
2024-07-10 00:28:03,475 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_product_links_20240710_002802.json found after 1 retries.
2024-07-10 00:28:03,476 - INFO - Output: {'title': 'Amazon Basics Powerline Ethernet 5-Port Switch, 480Mbps (ABFPSN5A), White', 'url': 'https://www.amazon.com/Amazon-Basics-Powerline-Ethernet-5-Port-Switch/dp/B07P3Q6Z6H/', 'productTitle': '', 'reviewUrl': 'https://www.amazon.com/TAURI-14-Yellowing-Protection-Shockproof/dp/B0B5TLRTZ5/ref=sr_1_57?dib=eyJ2IjoiMSJ9.Tv8UdOy7xe3-xO2bcntfpV7uozGH9yv-9SQM5pqL84qJWr8O1iSKsluYugtXIF8glYGtQzDAmdv24DPJ83zPNPqYGXfl1TWrHPIbRIX18qHKgEfdFCTd6XJ1Y3L6L0GzL5R2793HlVmj3LAZt6xFT0uHTUpdLhcpiCmGpOM-rY8YwMw6Sa2Rsxv93UEOMOzME5ef3RzmzyNUD26GrHyZ2_zublnEvhD_LggotapidPhLXtI5iDvLOcBHeWnQO2O2Y_QQKOAVc38SvucqOmrwrcmXHyWg5lBoI3UGo2l-gFc.2__MBI3jylrALYSmtnwAcJY_p4gSb0tPKUFLGyCFzGY&dib;_tag=se&qid;=1720548716&s;=wireless&sr;=1-57', 'reviewsUrl': 'https://www.amazon.com/TAURI-14-Yellowing-Protection-Shockproof/dp/B0B5TLRTZ5/ref=cm_cr_arp_d_pt?ie=UTF8&reviewerType=all_reviews', 'addToCartUrl': '', 'sponsoredProductUrl': ''}
2024-07-10 00:28:54,586 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'list me all the product urls', '--source', 'https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_list_me_all_the_product_urls_20240710_002853.json\n', stderr='2024-07-10 00:14:50,691 - INFO - Starting scrape with...\nprompt: list me all the product urls\nsource: https://www.walmart.com/ip/Straight-Talk-Samsung-Galaxy-A14-5G-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk/2311706193?athbdg=L1102\n2024-07-10 00:14:50,809 - INFO - Starting scraping...\n2024-07-10 00:14:59,090 - INFO - Content scraped\n2024-07-10 00:25:20,599 - INFO - Loading faiss with AVX512 support.\n2024-07-10 00:25:20,671 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-10 00:28:53,676 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_list_me_all_the_product_urls_20240710_002853.json\n')
2024-07-10 00:28:54,587 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_list_me_all_the_product_urls_20240710_002853.json']
2024-07-10 00:28:54,588 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_list_me_all_the_product_urls_20240710_002853.json
2024-07-10 00:28:54,588 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/walmartcom_list_me_all_the_product_urls_20240710_002853.json found after 1 retries.
2024-07-10 00:28:54,588 - INFO - Output: {'ProductUrls': ['NA']}
2024-07-10 20:52:30,786 - INFO - Received scrape request with...
prompt: Give me all the URLs of cell phones
source: https://www.amazon.com/cell-phones/s?k=cell+phones
2024-07-10 20:53:53,288 - INFO - Received scrape request with...
prompt: Give me all the URLs of cell phones
source: https://www.amazon.com/cell-phones/s?k=cell+phones
2024-07-10 20:54:31,313 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'Give me all the URLs of cell phones', '--source', 'https://www.amazon.com/cell-phones/s?k=cell+phones'], returncode=0, stdout='', stderr="2024-07-10 20:53:58,895 - INFO - Starting scrape with...\nprompt: Give me all the URLs of cell phones\nsource: https://www.amazon.com/cell-phones/s?k=cell+phones\n2024-07-10 20:53:58,947 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-10 20:54:30,060 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-10 20:54:31,314 - INFO - Output lines: []
2024-07-10 20:54:31,314 - ERROR - No output from scrap.py
2024-07-10 20:55:54,817 - INFO - Received scrape request with...
prompt: List me all the URLs associated with each cell phone name, and price
source: https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011
2024-07-10 21:40:46,533 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'Give me all the URLs of cell phones', '--source', 'https://www.amazon.com/cell-phones/s?k=cell+phones'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_Give_me_all_the_URLs_of_cell_phones_20240710_214034.json\n', stderr='2024-07-10 20:53:22,931 - INFO - Starting scrape with...\nprompt: Give me all the URLs of cell phones\nsource: https://www.amazon.com/cell-phones/s?k=cell+phones\n2024-07-10 20:53:23,032 - INFO - Starting scraping...\n2024-07-10 20:53:32,786 - INFO - Content scraped\n2024-07-10 20:55:00,465 - INFO - Loading faiss with AVX512 support.\n2024-07-10 20:55:00,534 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-10 21:40:34,416 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_Give_me_all_the_URLs_of_cell_phones_20240710_214034.json\n')
2024-07-10 21:40:46,543 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_Give_me_all_the_URLs_of_cell_phones_20240710_214034.json']
2024-07-10 21:40:46,543 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_Give_me_all_the_URLs_of_cell_phones_20240710_214034.json
2024-07-10 21:40:46,547 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_Give_me_all_the_URLs_of_cell_phones_20240710_214034.json found after 1 retries.
2024-07-10 21:40:46,559 - INFO - Output: {'url': 'https://www.amazon.com/s?k=cell+phones&ref=nb_sb_noss', 'products': [{'title': 'Ring Alarm Security Kit', 'url': 'https://www.amazon.com/Ring-Alarm-Security-Kit/dp/B07PRJD8XL/ref=sr_1_4?dcb=1&qid=1654251045&refinements=p_n_feature_keywords_two_browse-bin%3ACell+Phones&rnid=728001011&s=wireless'}, {'title': 'Motorola Moto G Power (2021) with 4G LTE - Unlocked Dual SIM', 'url': 'https://www.amazon.com/Motorola-Moto-Power-Unlocked-Dual-Sim/dp/B09TG89P52/ref=sr_1_3?dcb=1&qid=1654251045&refinements=p_n_feature_keywords_two_browse-bin%3ACell+Phones&rnid=728001011&s=wireless'}, {'title': 'Smartwatches', 'url': 'https://www.amazon.com/s?k=smartwatch&ref=nb_sb_noss_2'}, {'title': 'Google Nest Indoor Cam (2nd gen)', 'url': 'https://www.amazon.com/Google-Nest-Indoor-Security-Cam/dp/B074VQ9YM6/ref=sr_1_3?dcb=1&qid=1654251045&refinements=p_n_feature_keywords_two_browse-bin%3ASmart+Home&rnid=1708461011&rsvpWasRight=0&th=1'}, {'title': 'Apple Watch Series 7 (GPS + Cellular)', 'url': 'https://www.amazon.com/Apple-Watch-Series-7-Cellular/dp/B08ZXKNQ31/ref=sr_1_4?dcb=1&qid=1654251045&refinements=p_n_feature_keywords_two_browse-bin%3AWatches&rnid=379834001&s=kitchen'}]}
2024-07-10 22:26:06,148 - INFO - Received scrape request with...
prompt: List me all the URLs associated with each cell phone name, and price
source: https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011
2024-07-10 22:28:49,610 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me all the URLs associated with each cell phone name, and price', '--source', 'https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011'], returncode=0, stdout='', stderr="2024-07-10 22:27:11,615 - INFO - Starting scrape with...\nprompt: List me all the URLs associated with each cell phone name, and price\nsource: https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011\n2024-07-10 22:27:12,445 - INFO - Starting scraping...\n/home/noman/miniconda3/envs/scrap-noman/lib/python3.9/site-packages/scrapegraphai/utils/cleanup_html.py:27: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  soup = BeautifulSoup(html_content, 'html.parser')\n2024-07-10 22:28:46,765 - ERROR - Error during SmartScraperGraph execution: No HTML body content found, please try setting the 'headless' flag to False in the graph configuration.\n")
2024-07-10 22:28:49,613 - INFO - Output lines: []
2024-07-10 22:28:49,613 - ERROR - No output from scrap.py
2024-07-10 22:49:45,417 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me all the URLs associated with each cell phone name, and price', '--source', 'https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240710_224932.json\n', stderr='2024-07-10 20:56:01,877 - INFO - Starting scrape with...\nprompt: List me all the URLs associated with each cell phone name, and price\nsource: https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011\n2024-07-10 20:56:01,998 - INFO - Starting scraping...\n2024-07-10 20:56:14,906 - INFO - Content scraped\n2024-07-10 21:40:58,886 - INFO - Loading faiss with AVX512 support.\n2024-07-10 21:41:06,634 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-10 22:49:32,598 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240710_224932.json\n')
2024-07-10 22:49:45,421 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240710_224932.json']
2024-07-10 22:49:45,421 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240710_224932.json
2024-07-10 22:49:45,423 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240710_224932.json found after 1 retries.
2024-07-10 22:49:45,427 - INFO - Output: {'url': 'https://www.amazon.com/s?bbn=7072561011&rh;=n%3A7072561011%2Cp_n_feature_twenty-one_browse-bin%3A12', 'title': '', 'description': ''}
2024-07-11 19:29:08,606 - INFO - Received scrape request with...
prompt: List me all the URLs associated with each cell phone name, and price
source: https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011
2024-07-11 19:45:16,531 - INFO - Subprocess result: CompletedProcess(args=['python', 'scrap.py', '--prompt', 'List me all the URLs associated with each cell phone name, and price', '--source', 'https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011'], returncode=0, stdout='/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240711_194505.json\n', stderr='2024-07-11 19:29:14,963 - INFO - Starting scrape with...\nprompt: List me all the URLs associated with each cell phone name, and price\nsource: https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011\n2024-07-11 19:29:15,079 - INFO - Starting scraping...\n2024-07-11 19:29:20,914 - INFO - Content scraped\n2024-07-11 19:29:53,149 - INFO - Loading faiss with AVX512 support.\n2024-07-11 19:29:53,198 - INFO - Successfully loaded faiss with AVX512 support.\n2024-07-11 19:45:05,341 - INFO - Result successfully saved to /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240711_194505.json\n')
2024-07-11 19:45:16,959 - INFO - Output lines: ['/home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240711_194505.json']
2024-07-11 19:45:16,959 - INFO - File path: /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240711_194505.json
2024-07-11 19:45:17,038 - INFO - File /home/noman/26-Langchain-based-Web-Scraping-with-ScrapeGraphAI/results/amazoncom_List_me_all_the_URLs_associated_with_each_cell_pho_20240711_194505.json found after 1 retries.
2024-07-11 19:45:17,365 - INFO - Output: {'title': 'Top Smartphones Available on Amazon', 'chunk1': {'items': [{'text': 'https://www.amazon.com/Samsung-Galaxy-A32-5G-Unlocked-Titanium/dp/B08W79RKPZ?ref_=Oct_d_osa_d_7072561011_1&pf;_rd_p=aa3c8715-1b22-47b2-9166-05886e2103a4&pf;_rd_r=J6Y0HR3E60CGW54MJNZ4&pd;_rd_wg=w9YRb', 'anchor_text': 'Samsung Galaxy A32 5G (Unlocked, Android, Titanium)'}, {'text': 'https://www.amazon.com/cell-phone-devices/www.amazon.com', 'anchor_text': 'Cell Phone Devices on Amazon'}, {'text': 'https://www.amazon.com/Moto-3-Day-Battery-Unlocked-Smartphone/dp/B08XQGY2L6?ref_=Oct_d_orecs_d_7072561011_4&pd;_rd_w=Nydxb', 'anchor_text': 'Motorola Moto E (4th Gen) with 3 Day Battery Life (Unlocked, 16GB)'}, {'text': 'https://www.amazon.com/Apple-iPhone-11-64GB-Black/dp/B07ZPKN6YR?ref_=Oct_d_obs_d_7072561011_1&pd;_rd_w=vUedH', 'anchor_text': 'Apple iPhone 11 (64GB, Black)'}, {'text': 'https://www.amazon.com/Apple-iPhone-12-64GB-Black/dp/B08PP5MSVB?ref_=Oct_d_obs_d_7072561011_2&pd;_rd_w=vUedH', 'anchor_text': 'Apple iPhone 12 (64GB, Black)'}]}, 'chunk2': {'items': [{'title': 'Samsung Galaxy A32 5G (Unlocked, Android, Titanium)', 'url': 'https://www.amazon.com/Samsung-Galaxy-A32-5G-Unlocked-Titanium/dp/B08W79RKPZ?ref_=Oct_d_osa_d_7072561011_1&pf;_rd_p=aa3c8715-1b22-47b2-9166-05886e2103a4&pf;_rd_r=J6Y0HR3E60CGW54MJNZ4&pd;_rd_wg=w9YRb'}, {'title': 'Cell Phone Devices on Amazon', 'url': 'https://www.amazon.com/cell-phone-devices/www.amazon.com'}, {'title': 'Motorola Moto E (4th Gen) with 3 Day Battery Life (Unlocked, 16GB)', 'url': 'https://www.amazon.com/Moto-3-Day-Battery-Unlocked-Smartphone/dp/B08XQGY2L6?ref_=Oct_d_orecs_d_7072561011_4&pd;_rd_w=Nydxb'}, {'title': 'Apple iPhone 11 (64GB, Black)', 'url': 'https://www.amazon.com/Apple-iPhone-11-64GB-Black/dp/B07ZPKN6YR?ref_=Oct_d_obs_d_7072561011_1&pd;_rd_w=vUedH'}, {'title': 'Apple iPhone 12 (64GB, Black)', 'url': 'https://www.amazon.com/Apple-iPhone-12-64GB-Black/dp/B08PP5MSVB?ref_=Oct_d_obs_d_7072561011_2&pd;_rd_w=vUedH'}]}, 'chunk3': {'items': [{'title': 'Samsung Galaxy A32 5G (Unlocked, Android, Titanium)', 'url': 'https://www.amazon.com/Samsung-Galaxy-A32-5G-Unlocked-Titanium/dp/B08W79RKPZ?ref_=Oct_d_osa_d_7072561011_1&pf;_rd_p=aa3c8715-1b22-47b2-9166-05886e2103a4&pf;_rd_r=J6Y0HR3E60CGW54MJNZ4&pd;_rd_wg=w9YRb'}, {'title': 'Cell Phone Devices on Amazon', 'url': 'https://www.amazon.com/cell-phone-devices/www.amazon.com'}, {'title': 'Motorola Moto E (4th Gen) with 3 Day Battery Life (Unlocked, 16GB)', 'url': 'https://www.amazon.com/Moto-3-Day-Battery-Unlocked-Smartphone/dp/B08XQGY2L6?ref_=Oct_d_orecs_d_7072561011_4&pd;_rd_w=Nydxb'}, {'title': 'Apple iPhone 11 (64GB, Black)', 'url': 'https://www.amazon.com/Apple-iPhone-11-64GB-Black/dp/B07ZPKN6YR?ref_=Oct_d_obs_d_7072561011_1&pd;_rd_w=vUedH'}, {'title': 'Apple iPhone 12 (64GB, Black)', 'url': 'https://www.amazon.com/Apple-iPhone-12-64GB-Black/dp/B08PP5MSVB?ref_=Oct_d_obs_d_7072561011_2&pd;_rd_w=vUedH'}]}}
2024-07-11 20:12:27,243 - INFO - Received scrape request with...
prompt: List me all the URLs associated with each cell phone name, and price
source: https://www.amazon.com/cell-phone-devices/b?ie=UTF8&node=7072561011
